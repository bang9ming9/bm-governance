// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package abis

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// BMerc1155MetaData contains all meta data concerning the BMerc1155 contract.
var BMerc1155MetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"version\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"uri_\",\"type\":\"string\"},{\"internalType\":\"contractIERC20\",\"name\":\"erc20_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"governor\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AddressInsufficientBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CheckpointUnorderedInsertion\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ECDSAInvalidSignature\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"length\",\"type\":\"uint256\"}],\"name\":\"ECDSAInvalidSignatureLength\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"ECDSAInvalidSignatureS\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC1155InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC1155InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"idsLength\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"valuesLength\",\"type\":\"uint256\"}],\"name\":\"ERC1155InvalidArrayLength\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"ERC1155InvalidOperator\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC1155InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC1155InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC1155MissingApprovalForAll\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"timepoint\",\"type\":\"uint256\"},{\"internalType\":\"uint48\",\"name\":\"clock\",\"type\":\"uint48\"}],\"name\":\"ERC5805FutureLookup\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC6372InconsistentClock\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedInnerCall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"currentNonce\",\"type\":\"uint256\"}],\"name\":\"InvalidAccountNonce\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidShortString\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"bits\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"SafeCastOverflowedUintDowncast\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"str\",\"type\":\"string\"}],\"name\":\"StringTooLong\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"}],\"name\":\"VotesExpiredSignature\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fromDelegate\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"toDelegate\",\"type\":\"address\"}],\"name\":\"DelegateChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previousVotes\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newVotes\",\"type\":\"uint256\"}],\"name\":\"DelegateVotesChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"EIP712DomainChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CLOCK_MODE\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"clock\",\"outputs\":[{\"internalType\":\"uint48\",\"name\":\"\",\"type\":\"uint48\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegatee\",\"type\":\"address\"}],\"name\":\"delegate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"delegateByOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegatee\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"delegateBySig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"delegates\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"delegates\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"eip712Domain\",\"outputs\":[{\"internalType\":\"bytes1\",\"name\":\"fields\",\"type\":\"bytes1\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"version\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"verifyingContract\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"},{\"internalType\":\"uint256[]\",\"name\":\"extensions\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"exists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"timepoint\",\"type\":\"uint256\"}],\"name\":\"getPastTotalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"timepoint\",\"type\":\"uint256\"}],\"name\":\"getPastVotes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getVotes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"mintedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"timepoint\",\"type\":\"uint256\"}],\"name\":\"timepointID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]",
	Bin: "0x6101a060405234801562000011575f80fd5b50604051620031663803806200316683398101604081905262000034916200031e565b80858585620000438162000163565b506200005182600562000175565b610120526200006281600662000175565b61014052815160208084019190912060e052815190820120610100524660a052620000ef60e05161010051604080517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f60208201529081019290925260608201524660808201523060a08201525f9060c00160405160208183030381529060405280519060200120905090565b60805250503060c0526001600160a01b0381166200012757604051631e4fbdf760e01b81525f60048201526024015b60405180910390fd5b6200013281620001ad565b506001600160a01b03821662000146575f80fd5b5033610160526001600160a01b0316610180525062000583915050565b60026200017182826200045f565b5050565b5f60208351101562000194576200018c83620001fe565b9050620001a7565b81620001a184826200045f565b5060ff90505b92915050565b600880546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0905f90a35050565b5f80829050601f815111156200022b578260405163305a27a960e01b81526004016200011e91906200052b565b805162000238826200055f565b179392505050565b634e487b7160e01b5f52604160045260245ffd5b5f5b838110156200027057818101518382015260200162000256565b50505f910152565b5f82601f83011262000288575f80fd5b81516001600160401b0380821115620002a557620002a562000240565b604051601f8301601f19908116603f01168101908282118183101715620002d057620002d062000240565b81604052838152866020858801011115620002e9575f80fd5b620002fc84602083016020890162000254565b9695505050505050565b6001600160a01b03811681146200031b575f80fd5b50565b5f805f805f60a0868803121562000333575f80fd5b85516001600160401b03808211156200034a575f80fd5b6200035889838a0162000278565b965060208801519150808211156200036e575f80fd5b6200037c89838a0162000278565b9550604088015191508082111562000392575f80fd5b50620003a18882890162000278565b9350506060860151620003b48162000306565b6080870151909250620003c78162000306565b809150509295509295909350565b600181811c90821680620003ea57607f821691505b6020821081036200040957634e487b7160e01b5f52602260045260245ffd5b50919050565b601f8211156200045a57805f5260205f20601f840160051c81016020851015620004365750805b601f840160051c820191505b8181101562000457575f815560010162000442565b50505b505050565b81516001600160401b038111156200047b576200047b62000240565b62000493816200048c8454620003d5565b846200040f565b602080601f831160018114620004c9575f8415620004b15750858301515b5f19600386901b1c1916600185901b17855562000523565b5f85815260208120601f198616915b82811015620004f957888601518255948401946001909101908401620004d8565b50858210156200051757878501515f19600388901b60f8161c191681555b505060018460011b0185555b505050505050565b602081525f82518060208401526200054b81604085016020870162000254565b601f01601f19169190910160400192915050565b8051602080830151919081101562000409575f1960209190910360031b1b16919050565b60805160a05160c05160e0516101005161012051610140516101605161018051612b7d620005e95f395f610a2501525f611f1901525f6110d401525f6110a701525f61179101525f61176901525f6116c401525f6116ee01525f6117180152612b7d5ff3fe6080604052600436106101c7575f3560e01c80637642b04f116100f2578063a22cb46511610092578063c47e025211610062578063c47e02521461057b578063e985e9c51461059a578063f242432a146105b9578063f2fde38b146105d8575f80fd5b8063a22cb465146104dc578063bd85b039146104fb578063bfb30e4614610526578063c3cda5201461055c575f80fd5b80638da5cb5b116100cd5780638da5cb5b146104565780638e539e8c1461047357806391ddadf4146104925780639ab24eb0146104bd575f80fd5b80637642b04f146103dc5780637ecebe00146103fb57806384b0196e1461042f575f80fd5b80634bf5d7e9116101685780635c19a95c116101385780635c19a95c1461036b5780636044ae901461038a5780636a627842146103a9578063715018a6146103c8575f80fd5b80634bf5d7e9146102c75780634e1273f4146102db5780634f558e7914610307578063587cde1e14610334575f80fd5b806318160ddd116101a357806318160ddd1461025f5780631c75cfb4146102735780632eb2c2d6146102875780633a46b1a8146102a8575f80fd5b8062fdd58e146101d257806301ffc9a7146102045780630e89341c14610233575f80fd5b366101ce57005b5f80fd5b3480156101dd575f80fd5b506101f16101ec3660046123c3565b6105f7565b6040519081526020015b60405180910390f35b34801561020f575f80fd5b5061022361021e366004612400565b61061e565b60405190151581526020016101fb565b34801561023e575f80fd5b5061025261024d36600461241b565b61066d565b6040516101fb9190612475565b34801561026a575f80fd5b506004546101f1565b34801561027e575f80fd5b506101f16106ff565b348015610292575f80fd5b506102a66102a13660046125c7565b610723565b005b3480156102b3575f80fd5b506101f16102c23660046123c3565b61078f565b3480156102d2575f80fd5b50610252610828565b3480156102e6575f80fd5b506102fa6102f536600461266a565b6108a0565b6040516101fb919061275e565b348015610312575f80fd5b5061022361032136600461241b565b5f90815260036020526040902054151590565b34801561033f575f80fd5b5061035361034e366004612770565b61096b565b6040516001600160a01b0390911681526020016101fb565b348015610376575f80fd5b506102a6610385366004612770565b6109a6565b348015610395575f80fd5b506102a66103a4366004612770565b6109b5565b3480156103b4575f80fd5b506102a66103c3366004612770565b610a04565b3480156103d3575f80fd5b506102a6610b0f565b3480156103e7575f80fd5b506101f16103f636600461241b565b610b22565b348015610406575f80fd5b506101f1610415366004612770565b6001600160a01b03165f9081526007602052604090205490565b34801561043a575f80fd5b50610443610b30565b6040516101fb9796959493929190612789565b348015610461575f80fd5b506008546001600160a01b0316610353565b34801561047e575f80fd5b506101f161048d36600461241b565b610b72565b34801561049d575f80fd5b506104a6610bca565b60405165ffffffffffff90911681526020016101fb565b3480156104c8575f80fd5b506101f16104d7366004612770565b610bd3565b3480156104e7575f80fd5b506102a66104f63660046127f8565b610c24565b348015610506575f80fd5b506101f161051536600461241b565b5f9081526003602052604090205490565b348015610531575f80fd5b506101f1610540366004612831565b600b60209081525f928352604080842090915290825290205481565b348015610567575f80fd5b506102a661057636600461285b565b610c2f565b348015610586575f80fd5b50610353610595366004612831565b610ceb565b3480156105a5575f80fd5b506102236105b43660046128b6565b610d13565b3480156105c4575f80fd5b506102a66105d33660046128de565b610d40565b3480156105e3575f80fd5b506102a66105f2366004612770565b610d9f565b5f818152602081815260408083206001600160a01b03861684529091529020545b92915050565b5f6001600160e01b03198216636cdb3d1360e11b148061064e57506001600160e01b031982166303a24d0760e21b145b8061061857506301ffc9a760e01b6001600160e01b0319831614610618565b60606002805461067c9061293e565b80601f01602080910402602001604051908101604052809291908181526020018280546106a89061293e565b80156106f35780601f106106ca576101008083540402835291602001916106f3565b820191905f5260205f20905b8154815290600101906020018083116106d657829003601f168201915b50505050509050919050565b5f62093a8061070c610bca565b65ffffffffffff1661071e919061299e565b905090565b336001600160a01b038616811480159061074457506107428682610d13565b155b1561077a5760405163711bec9160e11b81526001600160a01b038083166004830152871660248201526044015b60405180910390fd5b6107878686868686610ddc565b505050505050565b5f80610799610bca565b90508065ffffffffffff1683106107d457604051637669fc0f60e11b81526004810184905265ffffffffffff82166024820152604401610771565b6108176107e084610e3a565b600a5f6107ec87610b22565b815260208082019290925260409081015f9081206001600160a01b038a168252909252902090610e70565b6001600160d01b0316949350505050565b6060610832610f20565b65ffffffffffff16610842610bca565b65ffffffffffff1614610868576040516301bfc1c560e61b815260040160405180910390fd5b5060408051808201909152601b81527f6d6f64653d74696d657374616d702666726f6d3d64656661756c740000000000602082015290565b606081518351146108d15781518351604051635b05999160e01b815260048101929092526024820152604401610771565b5f835167ffffffffffffffff8111156108ec576108ec612487565b604051908082528060200260200182016040528015610915578160200160208202803683370190505b5090505f5b84518110156109635760208082028601015161093e906020808402870101516105f7565b828281518110610950576109506129bd565b602090810291909101015260010161091a565b509392505050565b5f60095f6109776106ff565b815260208082019290925260409081015f9081206001600160a01b039586168252909252902054909116919050565b336109b18183610f2a565b5050565b6109bd610fc7565b5f6109c78261096b565b9050816001600160a01b0316816001600160a01b0316146109ff576001600160a01b038116156109f5575f80fd5b6109ff8283610f2a565b6109b1825b6040516370a0823160e01b81526001600160a01b0382811660048301525f917f0000000000000000000000000000000000000000000000000000000000000000909116906370a0823190602401602060405180830381865afa158015610a6c573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610a9091906129d1565b90505f610a9b6106ff565b5f818152600b602090815260408083206001600160a01b038816845291829052909120549192509080841115610b08576001600160a01b0385165f908152602083905260409020849055610b088584610af484886129e8565b60405180602001604052805f815250610ff4565b5050505050565b610b17610fc7565b610b205f61104f565b565b5f61061862093a808361299e565b5f6060805f805f6060610b416110a0565b610b496110cd565b604080515f80825260208201909252600f60f81b9b939a50919850469750309650945092509050565b5f80610b7c610bca565b90508065ffffffffffff168310610bb757604051637669fc0f60e11b81526004810184905265ffffffffffff82166024820152604401610771565b610bc361051584610b22565b9392505050565b5f61071e610f20565b5f610c15600a5f610be26106ff565b81526020019081526020015f205f846001600160a01b03166001600160a01b031681526020019081526020015f206110fa565b6001600160d01b031692915050565b6109b1338383611131565b83421115610c5357604051632341d78760e11b815260048101859052602401610771565b604080517fe48329057bfd03d55e49b547132e39cffd9c1820ad7b9d4c5307691425d15adf60208201526001600160a01b0388169181019190915260608101869052608081018590525f90610ccc90610cc49060a001604051602081830303815290604052805190602001206111c5565b8585856111f1565b9050610cd8818761121d565b610ce28188610f2a565b50505050505050565b5f9182526009602090815260408084206001600160a01b039384168552909152909120541690565b6001600160a01b039182165f90815260016020908152604080832093909416825291909152205460ff1690565b336001600160a01b0386168114801590610d615750610d5f8682610d13565b155b15610d925760405163711bec9160e11b81526001600160a01b03808316600483015287166024820152604401610771565b610787868686868661126f565b610da7610fc7565b6001600160a01b038116610dd057604051631e4fbdf760e01b81525f6004820152602401610771565b610dd98161104f565b50565b6001600160a01b038416610e0557604051632bfa23e760e11b81525f6004820152602401610771565b6001600160a01b038516610e2d57604051626a0d4560e21b81525f6004820152602401610771565b610b0885858585856112ee565b5f65ffffffffffff821115610e6c576040516306dfcc6560e41b81526030600482015260248101839052604401610771565b5090565b81545f9081816005811115610ecc575f610e8984611341565b610e9390856129e8565b5f8881526020902090915081015465ffffffffffff9081169087161015610ebc57809150610eca565b610ec78160016129fb565b92505b505b5f610ed987878585611425565b90508015610f1357610efd87610ef06001846129e8565b5f91825260209091200190565b54600160301b90046001600160d01b0316610f15565b5f5b979650505050505050565b5f61071e42610e3a565b5f610f348361096b565b90508160095f610f426106ff565b815260208082019290925260409081015f9081206001600160a01b038881168084529190945282822080546001600160a01b0319169585169590951790945590518583169392851692917f3134e8a2e6d97e929a7e54011ea5485d7d196dd5f0ba4d4ef95803e8e3fc257f91a4610fc28183610fbd8661147c565b611489565b505050565b6008546001600160a01b03163314610b205760405163118cdaa760e01b8152336004820152602401610771565b6001600160a01b03841661101d57604051632bfa23e760e11b81525f6004820152602401610771565b604080516001808252602082018690528183019081526060820185905260808201909252906107875f878484876112ee565b600880546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0905f90a35050565b606061071e7f0000000000000000000000000000000000000000000000000000000000000000600561160f565b606061071e7f0000000000000000000000000000000000000000000000000000000000000000600661160f565b80545f9080156111295761111383610ef06001846129e8565b54600160301b90046001600160d01b0316610bc3565b5f9392505050565b6001600160a01b0382166111595760405162ced3e160e81b81525f6004820152602401610771565b6001600160a01b038381165f81815260016020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b5f6106186111d16116b8565b8360405161190160f01b8152600281019290925260228201526042902090565b5f805f80611201888888886117e1565b92509250925061121182826118a9565b50909695505050505050565b6001600160a01b0382165f908152600760205260409020805460018101909155818114610fc2576040516301d4b62360e61b81526001600160a01b038416600482015260248101829052604401610771565b6001600160a01b03841661129857604051632bfa23e760e11b81525f6004820152602401610771565b6001600160a01b0385166112c057604051626a0d4560e21b81525f6004820152602401610771565b60408051600180825260208201869052818301908152606082018590526080820190925290610ce287878484875b6112fa85858585611961565b6001600160a01b03841615610b085782513390600103611333576020848101519084015161132c838989858589611a0d565b5050610787565b610787818787878787611b2e565b5f815f0361135057505f919050565b5f600161135c84611c15565b901c6001901b9050600181848161137557611375612976565b048201901c9050600181848161138d5761138d612976565b048201901c905060018184816113a5576113a5612976565b048201901c905060018184816113bd576113bd612976565b048201901c905060018184816113d5576113d5612976565b048201901c905060018184816113ed576113ed612976565b048201901c9050600181848161140557611405612976565b048201901c9050610bc38182858161141f5761141f612976565b04611ca8565b5f5b81831015610963575f61143a8484611cbd565b5f8781526020902090915065ffffffffffff86169082015465ffffffffffff16111561146857809250611476565b6114738160016129fb565b93505b50611427565b5f610618826101ec6106ff565b5f600a5f6114956106ff565b81526020019081526020015f209050826001600160a01b0316846001600160a01b0316141580156114c557505f82115b15611609576001600160a01b0384161561156c576001600160a01b0384165f908152602082905260408120819061150790611cd761150287611ce2565b611d15565b6001600160d01b031691506001600160d01b03169150856001600160a01b03167fdec2bacdd2f05b59de34da9b523dff8be42e5e38e818c82fdb0bae774387a7248383604051611561929190918252602082015260400190565b60405180910390a250505b6001600160a01b03831615611609576001600160a01b0383165f90815260208290526040812081906115a490611d4d61150287611ce2565b6001600160d01b031691506001600160d01b03169150846001600160a01b03167fdec2bacdd2f05b59de34da9b523dff8be42e5e38e818c82fdb0bae774387a72483836040516115fe929190918252602082015260400190565b60405180910390a250505b50505050565b606060ff83146116295761162283611d58565b9050610618565b8180546116359061293e565b80601f01602080910402602001604051908101604052809291908181526020018280546116619061293e565b80156116ac5780601f10611683576101008083540402835291602001916116ac565b820191905f5260205f20905b81548152906001019060200180831161168f57829003601f168201915b50505050509050610618565b5f306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614801561171057507f000000000000000000000000000000000000000000000000000000000000000046145b1561173a57507f000000000000000000000000000000000000000000000000000000000000000090565b61071e604080517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f60208201527f0000000000000000000000000000000000000000000000000000000000000000918101919091527f000000000000000000000000000000000000000000000000000000000000000060608201524660808201523060a08201525f9060c00160405160208183030381529060405280519060200120905090565b5f80807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a084111561181a57505f9150600390508261189f565b604080515f808252602082018084528a905260ff891692820192909252606081018790526080810186905260019060a0016020604051602081039080840390855afa15801561186b573d5f803e3d5ffd5b5050604051601f1901519150506001600160a01b03811661189657505f92506001915082905061189f565b92505f91508190505b9450945094915050565b5f8260038111156118bc576118bc612a0e565b036118c5575050565b60018260038111156118d9576118d9612a0e565b036118f75760405163f645eedf60e01b815260040160405180910390fd5b600282600381111561190b5761190b612a0e565b0361192c5760405163fce698f760e01b815260048101829052602401610771565b600382600381111561194057611940612a0e565b036109b1576040516335e2f38360e21b815260048101829052602401610771565b61196d84848484611d95565b5f6119766106ff565b83519091505f5b81811015610ce2575f858281518110611998576119986129bd565b60200260200101519050808403611a04575f848152600c60205260409020546001600160a01b03166119ce576119ce8133611ed1565b611a046119db828a610ceb565b6119e5838a610ceb565b8785815181106119f7576119f76129bd565b6020026020010151611489565b5060010161197d565b6001600160a01b0384163b156107875760405163f23a6e6160e01b81526001600160a01b0385169063f23a6e6190611a519089908990889088908890600401612a22565b6020604051808303815f875af1925050508015611a8b575060408051601f3d908101601f19168201909252611a8891810190612a5b565b60015b611af2573d808015611ab8576040519150601f19603f3d011682016040523d82523d5f602084013e611abd565b606091505b5080515f03611aea57604051632bfa23e760e11b81526001600160a01b0386166004820152602401610771565b805181602001fd5b6001600160e01b0319811663f23a6e6160e01b14610ce257604051632bfa23e760e11b81526001600160a01b0386166004820152602401610771565b6001600160a01b0384163b156107875760405163bc197c8160e01b81526001600160a01b0385169063bc197c8190611b729089908990889088908890600401612a76565b6020604051808303815f875af1925050508015611bac575060408051601f3d908101601f19168201909252611ba991810190612a5b565b60015b611bd9573d808015611ab8576040519150601f19603f3d011682016040523d82523d5f602084013e611abd565b6001600160e01b0319811663bc197c8160e01b14610ce257604051632bfa23e760e11b81526001600160a01b0386166004820152602401610771565b5f80608083901c15611c2957608092831c92015b604083901c15611c3b57604092831c92015b602083901c15611c4d57602092831c92015b601083901c15611c5f57601092831c92015b600883901c15611c7157600892831c92015b600483901c15611c8357600492831c92015b600283901c15611c9557600292831c92015b600183901c156106185760010192915050565b5f818310611cb65781610bc3565b5090919050565b5f611ccb600284841861299e565b610bc3908484166129fb565b5f610bc38284612ad3565b5f6001600160d01b03821115610e6c576040516306dfcc6560e41b815260d0600482015260248101839052604401610771565b5f80611d40611d22610bca565b611d38611d2e886110fa565b868863ffffffff16565b879190611f5c565b915091505b935093915050565b5f610bc38284612afa565b60605f611d6483611f69565b6040805160208082528183019092529192505f91906020820181803683375050509182525060208101929092525090565b611da184848484611f90565b6001600160a01b038416611e45575f805b8351811015611e2c575f838281518110611dce57611dce6129bd565b602002602001015190508060035f878581518110611dee57611dee6129bd565b602002602001015181526020019081526020015f205f828254611e1191906129fb565b90915550611e21905081846129fb565b925050600101611db2565b508060045f828254611e3e91906129fb565b9091555050505b6001600160a01b038316611609575f805b8351811015611ec0575f838281518110611e7257611e726129bd565b602002602001015190508060035f878581518110611e9257611e926129bd565b60209081029190910181015182528101919091526040015f2080549190910390559190910190600101611e56565b506004805491909103905550505050565b5f828152600c6020526040902080546001600160a01b0319166001600160a01b038316179055478015610fc2575f611f0a600a8361299e565b9050611f3f6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000168261219f565b611609611f4c82846129e8565b6001600160a01b0385169061219f565b5f80611d40858585612232565b5f60ff8216601f81111561061857604051632cd44ac360e21b815260040160405180910390fd5b8051825114611fbf5781518151604051635b05999160e01b815260048101929092526024820152604401610771565b335f5b83518110156120c1576020818102858101820151908501909101516001600160a01b03881615612073575f828152602081815260408083206001600160a01b038c1684529091529020548181101561204d576040516303dee4c560e01b81526001600160a01b038a166004820152602481018290526044810183905260648101849052608401610771565b5f838152602081815260408083206001600160a01b038d16845290915290209082900390555b6001600160a01b038716156120b7575f828152602081815260408083206001600160a01b038b168452909152812080548392906120b19084906129fb565b90915550505b5050600101611fc2565b5082516001036121415760208301515f906020840151909150856001600160a01b0316876001600160a01b0316846001600160a01b03167fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f628585604051612132929190918252602082015260400190565b60405180910390a45050610b08565b836001600160a01b0316856001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8686604051612190929190612b1a565b60405180910390a45050505050565b804710156121c25760405163cd78605960e01b8152306004820152602401610771565b5f826001600160a01b0316826040515f6040518083038185875af1925050503d805f811461220b576040519150601f19603f3d011682016040523d82523d5f602084013e612210565b606091505b5050905080610fc257604051630a12f52160e11b815260040160405180910390fd5b82545f908190801561234e575f61224e87610ef06001856129e8565b60408051808201909152905465ffffffffffff808216808452600160301b9092046001600160d01b0316602084015291925090871610156122a257604051632520601d60e01b815260040160405180910390fd5b805165ffffffffffff8088169116036122ee57846122c588610ef06001866129e8565b80546001600160d01b0392909216600160301b0265ffffffffffff90921691909117905561233e565b6040805180820190915265ffffffffffff80881682526001600160d01b0380881660208085019182528b54600181018d555f8d81529190912094519151909216600160301b029216919091179101555b602001519250839150611d459050565b50506040805180820190915265ffffffffffff80851682526001600160d01b0380851660208085019182528854600181018a555f8a815291822095519251909316600160301b029190931617920191909155905081611d45565b80356001600160a01b03811681146123be575f80fd5b919050565b5f80604083850312156123d4575f80fd5b6123dd836123a8565b946020939093013593505050565b6001600160e01b031981168114610dd9575f80fd5b5f60208284031215612410575f80fd5b8135610bc3816123eb565b5f6020828403121561242b575f80fd5b5035919050565b5f81518084525f5b818110156124565760208185018101518683018201520161243a565b505f602082860101526020601f19601f83011685010191505092915050565b602081525f610bc36020830184612432565b634e487b7160e01b5f52604160045260245ffd5b604051601f8201601f1916810167ffffffffffffffff811182821017156124c4576124c4612487565b604052919050565b5f67ffffffffffffffff8211156124e5576124e5612487565b5060051b60200190565b5f82601f8301126124fe575f80fd5b8135602061251361250e836124cc565b61249b565b8083825260208201915060208460051b870101935086841115612534575f80fd5b602086015b848110156125505780358352918301918301612539565b509695505050505050565b5f82601f83011261256a575f80fd5b813567ffffffffffffffff81111561258457612584612487565b612597601f8201601f191660200161249b565b8181528460208386010111156125ab575f80fd5b816020850160208301375f918101602001919091529392505050565b5f805f805f60a086880312156125db575f80fd5b6125e4866123a8565b94506125f2602087016123a8565b9350604086013567ffffffffffffffff8082111561260e575f80fd5b61261a89838a016124ef565b9450606088013591508082111561262f575f80fd5b61263b89838a016124ef565b93506080880135915080821115612650575f80fd5b5061265d8882890161255b565b9150509295509295909350565b5f806040838503121561267b575f80fd5b823567ffffffffffffffff80821115612692575f80fd5b818501915085601f8301126126a5575f80fd5b813560206126b561250e836124cc565b82815260059290921b840181019181810190898411156126d3575f80fd5b948201945b838610156126f8576126e9866123a8565b825294820194908201906126d8565b9650508601359250508082111561270d575f80fd5b5061271a858286016124ef565b9150509250929050565b5f815180845260208085019450602084015f5b8381101561275357815187529582019590820190600101612737565b509495945050505050565b602081525f610bc36020830184612724565b5f60208284031215612780575f80fd5b610bc3826123a8565b60ff60f81b8816815260e060208201525f6127a760e0830189612432565b82810360408401526127b98189612432565b606084018890526001600160a01b038716608085015260a0840186905283810360c085015290506127ea8185612724565b9a9950505050505050505050565b5f8060408385031215612809575f80fd5b612812836123a8565b915060208301358015158114612826575f80fd5b809150509250929050565b5f8060408385031215612842575f80fd5b82359150612852602084016123a8565b90509250929050565b5f805f805f8060c08789031215612870575f80fd5b612879876123a8565b95506020870135945060408701359350606087013560ff8116811461289c575f80fd5b9598949750929560808101359460a0909101359350915050565b5f80604083850312156128c7575f80fd5b6128d0836123a8565b9150612852602084016123a8565b5f805f805f60a086880312156128f2575f80fd5b6128fb866123a8565b9450612909602087016123a8565b93506040860135925060608601359150608086013567ffffffffffffffff811115612932575f80fd5b61265d8882890161255b565b600181811c9082168061295257607f821691505b60208210810361297057634e487b7160e01b5f52602260045260245ffd5b50919050565b634e487b7160e01b5f52601260045260245ffd5b634e487b7160e01b5f52601160045260245ffd5b5f826129b857634e487b7160e01b5f52601260045260245ffd5b500490565b634e487b7160e01b5f52603260045260245ffd5b5f602082840312156129e1575f80fd5b5051919050565b818103818111156106185761061861298a565b808201808211156106185761061861298a565b634e487b7160e01b5f52602160045260245ffd5b6001600160a01b03868116825285166020820152604081018490526060810183905260a0608082018190525f90610f1590830184612432565b5f60208284031215612a6b575f80fd5b8151610bc3816123eb565b6001600160a01b0386811682528516602082015260a0604082018190525f90612aa190830186612724565b8281036060840152612ab38186612724565b90508281036080840152612ac78185612432565b98975050505050505050565b6001600160d01b03828116828216039080821115612af357612af361298a565b5092915050565b6001600160d01b03818116838216019080821115612af357612af361298a565b604081525f612b2c6040830185612724565b8281036020840152612b3e8185612724565b9594505050505056fea2646970667358221220a7c128903ced63e863b70000f9b8a6ec1dbb47f13dce0a8cd0576a8abc8dcf3e64736f6c63430008180033",
}

// BMerc1155ABI is the input ABI used to generate the binding from.
// Deprecated: Use BMerc1155MetaData.ABI instead.
var BMerc1155ABI = BMerc1155MetaData.ABI

// BMerc1155Bin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use BMerc1155MetaData.Bin instead.
var BMerc1155Bin = BMerc1155MetaData.Bin

// DeployBMerc1155 deploys a new Ethereum contract, binding an instance of BMerc1155 to it.
func DeployBMerc1155(auth *bind.TransactOpts, backend bind.ContractBackend, name string, version string, uri_ string, erc20_ common.Address, governor common.Address) (common.Address, *types.Transaction, *BMerc1155, error) {
	parsed, err := BMerc1155MetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(BMerc1155Bin), backend, name, version, uri_, erc20_, governor)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &BMerc1155{BMerc1155Caller: BMerc1155Caller{contract: contract}, BMerc1155Transactor: BMerc1155Transactor{contract: contract}, BMerc1155Filterer: BMerc1155Filterer{contract: contract}}, nil
}

// BMerc1155 is an auto generated Go binding around an Ethereum contract.
type BMerc1155 struct {
	BMerc1155Caller     // Read-only binding to the contract
	BMerc1155Transactor // Write-only binding to the contract
	BMerc1155Filterer   // Log filterer for contract events
}

// BMerc1155Caller is an auto generated read-only Go binding around an Ethereum contract.
type BMerc1155Caller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BMerc1155Transactor is an auto generated write-only Go binding around an Ethereum contract.
type BMerc1155Transactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BMerc1155Filterer is an auto generated log filtering Go binding around an Ethereum contract events.
type BMerc1155Filterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BMerc1155Session is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type BMerc1155Session struct {
	Contract     *BMerc1155        // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// BMerc1155CallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type BMerc1155CallerSession struct {
	Contract *BMerc1155Caller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts    // Call options to use throughout this session
}

// BMerc1155TransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type BMerc1155TransactorSession struct {
	Contract     *BMerc1155Transactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts    // Transaction auth options to use throughout this session
}

// BMerc1155Raw is an auto generated low-level Go binding around an Ethereum contract.
type BMerc1155Raw struct {
	Contract *BMerc1155 // Generic contract binding to access the raw methods on
}

// BMerc1155CallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type BMerc1155CallerRaw struct {
	Contract *BMerc1155Caller // Generic read-only contract binding to access the raw methods on
}

// BMerc1155TransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type BMerc1155TransactorRaw struct {
	Contract *BMerc1155Transactor // Generic write-only contract binding to access the raw methods on
}

// NewBMerc1155 creates a new instance of BMerc1155, bound to a specific deployed contract.
func NewBMerc1155(address common.Address, backend bind.ContractBackend) (*BMerc1155, error) {
	contract, err := bindBMerc1155(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &BMerc1155{BMerc1155Caller: BMerc1155Caller{contract: contract}, BMerc1155Transactor: BMerc1155Transactor{contract: contract}, BMerc1155Filterer: BMerc1155Filterer{contract: contract}}, nil
}

// NewBMerc1155Caller creates a new read-only instance of BMerc1155, bound to a specific deployed contract.
func NewBMerc1155Caller(address common.Address, caller bind.ContractCaller) (*BMerc1155Caller, error) {
	contract, err := bindBMerc1155(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &BMerc1155Caller{contract: contract}, nil
}

// NewBMerc1155Transactor creates a new write-only instance of BMerc1155, bound to a specific deployed contract.
func NewBMerc1155Transactor(address common.Address, transactor bind.ContractTransactor) (*BMerc1155Transactor, error) {
	contract, err := bindBMerc1155(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &BMerc1155Transactor{contract: contract}, nil
}

// NewBMerc1155Filterer creates a new log filterer instance of BMerc1155, bound to a specific deployed contract.
func NewBMerc1155Filterer(address common.Address, filterer bind.ContractFilterer) (*BMerc1155Filterer, error) {
	contract, err := bindBMerc1155(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &BMerc1155Filterer{contract: contract}, nil
}

// bindBMerc1155 binds a generic wrapper to an already deployed contract.
func bindBMerc1155(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := BMerc1155MetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_BMerc1155 *BMerc1155Raw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _BMerc1155.Contract.BMerc1155Caller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_BMerc1155 *BMerc1155Raw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BMerc1155.Contract.BMerc1155Transactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_BMerc1155 *BMerc1155Raw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _BMerc1155.Contract.BMerc1155Transactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_BMerc1155 *BMerc1155CallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _BMerc1155.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_BMerc1155 *BMerc1155TransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BMerc1155.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_BMerc1155 *BMerc1155TransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _BMerc1155.Contract.contract.Transact(opts, method, params...)
}

// CLOCKMODE is a free data retrieval call binding the contract method 0x4bf5d7e9.
//
// Solidity: function CLOCK_MODE() view returns(string)
func (_BMerc1155 *BMerc1155Caller) CLOCKMODE(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _BMerc1155.contract.Call(opts, &out, "CLOCK_MODE")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// CLOCKMODE is a free data retrieval call binding the contract method 0x4bf5d7e9.
//
// Solidity: function CLOCK_MODE() view returns(string)
func (_BMerc1155 *BMerc1155Session) CLOCKMODE() (string, error) {
	return _BMerc1155.Contract.CLOCKMODE(&_BMerc1155.CallOpts)
}

// CLOCKMODE is a free data retrieval call binding the contract method 0x4bf5d7e9.
//
// Solidity: function CLOCK_MODE() view returns(string)
func (_BMerc1155 *BMerc1155CallerSession) CLOCKMODE() (string, error) {
	return _BMerc1155.Contract.CLOCKMODE(&_BMerc1155.CallOpts)
}

// BalanceOf is a free data retrieval call binding the contract method 0x00fdd58e.
//
// Solidity: function balanceOf(address account, uint256 id) view returns(uint256)
func (_BMerc1155 *BMerc1155Caller) BalanceOf(opts *bind.CallOpts, account common.Address, id *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _BMerc1155.contract.Call(opts, &out, "balanceOf", account, id)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceOf is a free data retrieval call binding the contract method 0x00fdd58e.
//
// Solidity: function balanceOf(address account, uint256 id) view returns(uint256)
func (_BMerc1155 *BMerc1155Session) BalanceOf(account common.Address, id *big.Int) (*big.Int, error) {
	return _BMerc1155.Contract.BalanceOf(&_BMerc1155.CallOpts, account, id)
}

// BalanceOf is a free data retrieval call binding the contract method 0x00fdd58e.
//
// Solidity: function balanceOf(address account, uint256 id) view returns(uint256)
func (_BMerc1155 *BMerc1155CallerSession) BalanceOf(account common.Address, id *big.Int) (*big.Int, error) {
	return _BMerc1155.Contract.BalanceOf(&_BMerc1155.CallOpts, account, id)
}

// BalanceOfBatch is a free data retrieval call binding the contract method 0x4e1273f4.
//
// Solidity: function balanceOfBatch(address[] accounts, uint256[] ids) view returns(uint256[])
func (_BMerc1155 *BMerc1155Caller) BalanceOfBatch(opts *bind.CallOpts, accounts []common.Address, ids []*big.Int) ([]*big.Int, error) {
	var out []interface{}
	err := _BMerc1155.contract.Call(opts, &out, "balanceOfBatch", accounts, ids)

	if err != nil {
		return *new([]*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new([]*big.Int)).(*[]*big.Int)

	return out0, err

}

// BalanceOfBatch is a free data retrieval call binding the contract method 0x4e1273f4.
//
// Solidity: function balanceOfBatch(address[] accounts, uint256[] ids) view returns(uint256[])
func (_BMerc1155 *BMerc1155Session) BalanceOfBatch(accounts []common.Address, ids []*big.Int) ([]*big.Int, error) {
	return _BMerc1155.Contract.BalanceOfBatch(&_BMerc1155.CallOpts, accounts, ids)
}

// BalanceOfBatch is a free data retrieval call binding the contract method 0x4e1273f4.
//
// Solidity: function balanceOfBatch(address[] accounts, uint256[] ids) view returns(uint256[])
func (_BMerc1155 *BMerc1155CallerSession) BalanceOfBatch(accounts []common.Address, ids []*big.Int) ([]*big.Int, error) {
	return _BMerc1155.Contract.BalanceOfBatch(&_BMerc1155.CallOpts, accounts, ids)
}

// Clock is a free data retrieval call binding the contract method 0x91ddadf4.
//
// Solidity: function clock() view returns(uint48)
func (_BMerc1155 *BMerc1155Caller) Clock(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _BMerc1155.contract.Call(opts, &out, "clock")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Clock is a free data retrieval call binding the contract method 0x91ddadf4.
//
// Solidity: function clock() view returns(uint48)
func (_BMerc1155 *BMerc1155Session) Clock() (*big.Int, error) {
	return _BMerc1155.Contract.Clock(&_BMerc1155.CallOpts)
}

// Clock is a free data retrieval call binding the contract method 0x91ddadf4.
//
// Solidity: function clock() view returns(uint48)
func (_BMerc1155 *BMerc1155CallerSession) Clock() (*big.Int, error) {
	return _BMerc1155.Contract.Clock(&_BMerc1155.CallOpts)
}

// CurrentID is a free data retrieval call binding the contract method 0x1c75cfb4.
//
// Solidity: function currentID() view returns(uint256)
func (_BMerc1155 *BMerc1155Caller) CurrentID(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _BMerc1155.contract.Call(opts, &out, "currentID")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// CurrentID is a free data retrieval call binding the contract method 0x1c75cfb4.
//
// Solidity: function currentID() view returns(uint256)
func (_BMerc1155 *BMerc1155Session) CurrentID() (*big.Int, error) {
	return _BMerc1155.Contract.CurrentID(&_BMerc1155.CallOpts)
}

// CurrentID is a free data retrieval call binding the contract method 0x1c75cfb4.
//
// Solidity: function currentID() view returns(uint256)
func (_BMerc1155 *BMerc1155CallerSession) CurrentID() (*big.Int, error) {
	return _BMerc1155.Contract.CurrentID(&_BMerc1155.CallOpts)
}

// Delegates is a free data retrieval call binding the contract method 0x587cde1e.
//
// Solidity: function delegates(address account) view returns(address)
func (_BMerc1155 *BMerc1155Caller) Delegates(opts *bind.CallOpts, account common.Address) (common.Address, error) {
	var out []interface{}
	err := _BMerc1155.contract.Call(opts, &out, "delegates", account)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Delegates is a free data retrieval call binding the contract method 0x587cde1e.
//
// Solidity: function delegates(address account) view returns(address)
func (_BMerc1155 *BMerc1155Session) Delegates(account common.Address) (common.Address, error) {
	return _BMerc1155.Contract.Delegates(&_BMerc1155.CallOpts, account)
}

// Delegates is a free data retrieval call binding the contract method 0x587cde1e.
//
// Solidity: function delegates(address account) view returns(address)
func (_BMerc1155 *BMerc1155CallerSession) Delegates(account common.Address) (common.Address, error) {
	return _BMerc1155.Contract.Delegates(&_BMerc1155.CallOpts, account)
}

// Delegates0 is a free data retrieval call binding the contract method 0xc47e0252.
//
// Solidity: function delegates(uint256 id, address account) view returns(address)
func (_BMerc1155 *BMerc1155Caller) Delegates0(opts *bind.CallOpts, id *big.Int, account common.Address) (common.Address, error) {
	var out []interface{}
	err := _BMerc1155.contract.Call(opts, &out, "delegates0", id, account)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Delegates0 is a free data retrieval call binding the contract method 0xc47e0252.
//
// Solidity: function delegates(uint256 id, address account) view returns(address)
func (_BMerc1155 *BMerc1155Session) Delegates0(id *big.Int, account common.Address) (common.Address, error) {
	return _BMerc1155.Contract.Delegates0(&_BMerc1155.CallOpts, id, account)
}

// Delegates0 is a free data retrieval call binding the contract method 0xc47e0252.
//
// Solidity: function delegates(uint256 id, address account) view returns(address)
func (_BMerc1155 *BMerc1155CallerSession) Delegates0(id *big.Int, account common.Address) (common.Address, error) {
	return _BMerc1155.Contract.Delegates0(&_BMerc1155.CallOpts, id, account)
}

// Eip712Domain is a free data retrieval call binding the contract method 0x84b0196e.
//
// Solidity: function eip712Domain() view returns(bytes1 fields, string name, string version, uint256 chainId, address verifyingContract, bytes32 salt, uint256[] extensions)
func (_BMerc1155 *BMerc1155Caller) Eip712Domain(opts *bind.CallOpts) (struct {
	Fields            [1]byte
	Name              string
	Version           string
	ChainId           *big.Int
	VerifyingContract common.Address
	Salt              [32]byte
	Extensions        []*big.Int
}, error) {
	var out []interface{}
	err := _BMerc1155.contract.Call(opts, &out, "eip712Domain")

	outstruct := new(struct {
		Fields            [1]byte
		Name              string
		Version           string
		ChainId           *big.Int
		VerifyingContract common.Address
		Salt              [32]byte
		Extensions        []*big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Fields = *abi.ConvertType(out[0], new([1]byte)).(*[1]byte)
	outstruct.Name = *abi.ConvertType(out[1], new(string)).(*string)
	outstruct.Version = *abi.ConvertType(out[2], new(string)).(*string)
	outstruct.ChainId = *abi.ConvertType(out[3], new(*big.Int)).(**big.Int)
	outstruct.VerifyingContract = *abi.ConvertType(out[4], new(common.Address)).(*common.Address)
	outstruct.Salt = *abi.ConvertType(out[5], new([32]byte)).(*[32]byte)
	outstruct.Extensions = *abi.ConvertType(out[6], new([]*big.Int)).(*[]*big.Int)

	return *outstruct, err

}

// Eip712Domain is a free data retrieval call binding the contract method 0x84b0196e.
//
// Solidity: function eip712Domain() view returns(bytes1 fields, string name, string version, uint256 chainId, address verifyingContract, bytes32 salt, uint256[] extensions)
func (_BMerc1155 *BMerc1155Session) Eip712Domain() (struct {
	Fields            [1]byte
	Name              string
	Version           string
	ChainId           *big.Int
	VerifyingContract common.Address
	Salt              [32]byte
	Extensions        []*big.Int
}, error) {
	return _BMerc1155.Contract.Eip712Domain(&_BMerc1155.CallOpts)
}

// Eip712Domain is a free data retrieval call binding the contract method 0x84b0196e.
//
// Solidity: function eip712Domain() view returns(bytes1 fields, string name, string version, uint256 chainId, address verifyingContract, bytes32 salt, uint256[] extensions)
func (_BMerc1155 *BMerc1155CallerSession) Eip712Domain() (struct {
	Fields            [1]byte
	Name              string
	Version           string
	ChainId           *big.Int
	VerifyingContract common.Address
	Salt              [32]byte
	Extensions        []*big.Int
}, error) {
	return _BMerc1155.Contract.Eip712Domain(&_BMerc1155.CallOpts)
}

// Exists is a free data retrieval call binding the contract method 0x4f558e79.
//
// Solidity: function exists(uint256 id) view returns(bool)
func (_BMerc1155 *BMerc1155Caller) Exists(opts *bind.CallOpts, id *big.Int) (bool, error) {
	var out []interface{}
	err := _BMerc1155.contract.Call(opts, &out, "exists", id)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// Exists is a free data retrieval call binding the contract method 0x4f558e79.
//
// Solidity: function exists(uint256 id) view returns(bool)
func (_BMerc1155 *BMerc1155Session) Exists(id *big.Int) (bool, error) {
	return _BMerc1155.Contract.Exists(&_BMerc1155.CallOpts, id)
}

// Exists is a free data retrieval call binding the contract method 0x4f558e79.
//
// Solidity: function exists(uint256 id) view returns(bool)
func (_BMerc1155 *BMerc1155CallerSession) Exists(id *big.Int) (bool, error) {
	return _BMerc1155.Contract.Exists(&_BMerc1155.CallOpts, id)
}

// GetPastTotalSupply is a free data retrieval call binding the contract method 0x8e539e8c.
//
// Solidity: function getPastTotalSupply(uint256 timepoint) view returns(uint256)
func (_BMerc1155 *BMerc1155Caller) GetPastTotalSupply(opts *bind.CallOpts, timepoint *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _BMerc1155.contract.Call(opts, &out, "getPastTotalSupply", timepoint)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetPastTotalSupply is a free data retrieval call binding the contract method 0x8e539e8c.
//
// Solidity: function getPastTotalSupply(uint256 timepoint) view returns(uint256)
func (_BMerc1155 *BMerc1155Session) GetPastTotalSupply(timepoint *big.Int) (*big.Int, error) {
	return _BMerc1155.Contract.GetPastTotalSupply(&_BMerc1155.CallOpts, timepoint)
}

// GetPastTotalSupply is a free data retrieval call binding the contract method 0x8e539e8c.
//
// Solidity: function getPastTotalSupply(uint256 timepoint) view returns(uint256)
func (_BMerc1155 *BMerc1155CallerSession) GetPastTotalSupply(timepoint *big.Int) (*big.Int, error) {
	return _BMerc1155.Contract.GetPastTotalSupply(&_BMerc1155.CallOpts, timepoint)
}

// GetPastVotes is a free data retrieval call binding the contract method 0x3a46b1a8.
//
// Solidity: function getPastVotes(address account, uint256 timepoint) view returns(uint256)
func (_BMerc1155 *BMerc1155Caller) GetPastVotes(opts *bind.CallOpts, account common.Address, timepoint *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _BMerc1155.contract.Call(opts, &out, "getPastVotes", account, timepoint)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetPastVotes is a free data retrieval call binding the contract method 0x3a46b1a8.
//
// Solidity: function getPastVotes(address account, uint256 timepoint) view returns(uint256)
func (_BMerc1155 *BMerc1155Session) GetPastVotes(account common.Address, timepoint *big.Int) (*big.Int, error) {
	return _BMerc1155.Contract.GetPastVotes(&_BMerc1155.CallOpts, account, timepoint)
}

// GetPastVotes is a free data retrieval call binding the contract method 0x3a46b1a8.
//
// Solidity: function getPastVotes(address account, uint256 timepoint) view returns(uint256)
func (_BMerc1155 *BMerc1155CallerSession) GetPastVotes(account common.Address, timepoint *big.Int) (*big.Int, error) {
	return _BMerc1155.Contract.GetPastVotes(&_BMerc1155.CallOpts, account, timepoint)
}

// GetVotes is a free data retrieval call binding the contract method 0x9ab24eb0.
//
// Solidity: function getVotes(address account) view returns(uint256)
func (_BMerc1155 *BMerc1155Caller) GetVotes(opts *bind.CallOpts, account common.Address) (*big.Int, error) {
	var out []interface{}
	err := _BMerc1155.contract.Call(opts, &out, "getVotes", account)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetVotes is a free data retrieval call binding the contract method 0x9ab24eb0.
//
// Solidity: function getVotes(address account) view returns(uint256)
func (_BMerc1155 *BMerc1155Session) GetVotes(account common.Address) (*big.Int, error) {
	return _BMerc1155.Contract.GetVotes(&_BMerc1155.CallOpts, account)
}

// GetVotes is a free data retrieval call binding the contract method 0x9ab24eb0.
//
// Solidity: function getVotes(address account) view returns(uint256)
func (_BMerc1155 *BMerc1155CallerSession) GetVotes(account common.Address) (*big.Int, error) {
	return _BMerc1155.Contract.GetVotes(&_BMerc1155.CallOpts, account)
}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address account, address operator) view returns(bool)
func (_BMerc1155 *BMerc1155Caller) IsApprovedForAll(opts *bind.CallOpts, account common.Address, operator common.Address) (bool, error) {
	var out []interface{}
	err := _BMerc1155.contract.Call(opts, &out, "isApprovedForAll", account, operator)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address account, address operator) view returns(bool)
func (_BMerc1155 *BMerc1155Session) IsApprovedForAll(account common.Address, operator common.Address) (bool, error) {
	return _BMerc1155.Contract.IsApprovedForAll(&_BMerc1155.CallOpts, account, operator)
}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address account, address operator) view returns(bool)
func (_BMerc1155 *BMerc1155CallerSession) IsApprovedForAll(account common.Address, operator common.Address) (bool, error) {
	return _BMerc1155.Contract.IsApprovedForAll(&_BMerc1155.CallOpts, account, operator)
}

// MintedAmount is a free data retrieval call binding the contract method 0xbfb30e46.
//
// Solidity: function mintedAmount(uint256 id, address account) view returns(uint256)
func (_BMerc1155 *BMerc1155Caller) MintedAmount(opts *bind.CallOpts, id *big.Int, account common.Address) (*big.Int, error) {
	var out []interface{}
	err := _BMerc1155.contract.Call(opts, &out, "mintedAmount", id, account)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// MintedAmount is a free data retrieval call binding the contract method 0xbfb30e46.
//
// Solidity: function mintedAmount(uint256 id, address account) view returns(uint256)
func (_BMerc1155 *BMerc1155Session) MintedAmount(id *big.Int, account common.Address) (*big.Int, error) {
	return _BMerc1155.Contract.MintedAmount(&_BMerc1155.CallOpts, id, account)
}

// MintedAmount is a free data retrieval call binding the contract method 0xbfb30e46.
//
// Solidity: function mintedAmount(uint256 id, address account) view returns(uint256)
func (_BMerc1155 *BMerc1155CallerSession) MintedAmount(id *big.Int, account common.Address) (*big.Int, error) {
	return _BMerc1155.Contract.MintedAmount(&_BMerc1155.CallOpts, id, account)
}

// Nonces is a free data retrieval call binding the contract method 0x7ecebe00.
//
// Solidity: function nonces(address owner) view returns(uint256)
func (_BMerc1155 *BMerc1155Caller) Nonces(opts *bind.CallOpts, owner common.Address) (*big.Int, error) {
	var out []interface{}
	err := _BMerc1155.contract.Call(opts, &out, "nonces", owner)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Nonces is a free data retrieval call binding the contract method 0x7ecebe00.
//
// Solidity: function nonces(address owner) view returns(uint256)
func (_BMerc1155 *BMerc1155Session) Nonces(owner common.Address) (*big.Int, error) {
	return _BMerc1155.Contract.Nonces(&_BMerc1155.CallOpts, owner)
}

// Nonces is a free data retrieval call binding the contract method 0x7ecebe00.
//
// Solidity: function nonces(address owner) view returns(uint256)
func (_BMerc1155 *BMerc1155CallerSession) Nonces(owner common.Address) (*big.Int, error) {
	return _BMerc1155.Contract.Nonces(&_BMerc1155.CallOpts, owner)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_BMerc1155 *BMerc1155Caller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _BMerc1155.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_BMerc1155 *BMerc1155Session) Owner() (common.Address, error) {
	return _BMerc1155.Contract.Owner(&_BMerc1155.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_BMerc1155 *BMerc1155CallerSession) Owner() (common.Address, error) {
	return _BMerc1155.Contract.Owner(&_BMerc1155.CallOpts)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_BMerc1155 *BMerc1155Caller) SupportsInterface(opts *bind.CallOpts, interfaceId [4]byte) (bool, error) {
	var out []interface{}
	err := _BMerc1155.contract.Call(opts, &out, "supportsInterface", interfaceId)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_BMerc1155 *BMerc1155Session) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _BMerc1155.Contract.SupportsInterface(&_BMerc1155.CallOpts, interfaceId)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_BMerc1155 *BMerc1155CallerSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _BMerc1155.Contract.SupportsInterface(&_BMerc1155.CallOpts, interfaceId)
}

// TimepointID is a free data retrieval call binding the contract method 0x7642b04f.
//
// Solidity: function timepointID(uint256 timepoint) pure returns(uint256)
func (_BMerc1155 *BMerc1155Caller) TimepointID(opts *bind.CallOpts, timepoint *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _BMerc1155.contract.Call(opts, &out, "timepointID", timepoint)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TimepointID is a free data retrieval call binding the contract method 0x7642b04f.
//
// Solidity: function timepointID(uint256 timepoint) pure returns(uint256)
func (_BMerc1155 *BMerc1155Session) TimepointID(timepoint *big.Int) (*big.Int, error) {
	return _BMerc1155.Contract.TimepointID(&_BMerc1155.CallOpts, timepoint)
}

// TimepointID is a free data retrieval call binding the contract method 0x7642b04f.
//
// Solidity: function timepointID(uint256 timepoint) pure returns(uint256)
func (_BMerc1155 *BMerc1155CallerSession) TimepointID(timepoint *big.Int) (*big.Int, error) {
	return _BMerc1155.Contract.TimepointID(&_BMerc1155.CallOpts, timepoint)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_BMerc1155 *BMerc1155Caller) TotalSupply(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _BMerc1155.contract.Call(opts, &out, "totalSupply")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_BMerc1155 *BMerc1155Session) TotalSupply() (*big.Int, error) {
	return _BMerc1155.Contract.TotalSupply(&_BMerc1155.CallOpts)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_BMerc1155 *BMerc1155CallerSession) TotalSupply() (*big.Int, error) {
	return _BMerc1155.Contract.TotalSupply(&_BMerc1155.CallOpts)
}

// TotalSupply0 is a free data retrieval call binding the contract method 0xbd85b039.
//
// Solidity: function totalSupply(uint256 id) view returns(uint256)
func (_BMerc1155 *BMerc1155Caller) TotalSupply0(opts *bind.CallOpts, id *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _BMerc1155.contract.Call(opts, &out, "totalSupply0", id)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TotalSupply0 is a free data retrieval call binding the contract method 0xbd85b039.
//
// Solidity: function totalSupply(uint256 id) view returns(uint256)
func (_BMerc1155 *BMerc1155Session) TotalSupply0(id *big.Int) (*big.Int, error) {
	return _BMerc1155.Contract.TotalSupply0(&_BMerc1155.CallOpts, id)
}

// TotalSupply0 is a free data retrieval call binding the contract method 0xbd85b039.
//
// Solidity: function totalSupply(uint256 id) view returns(uint256)
func (_BMerc1155 *BMerc1155CallerSession) TotalSupply0(id *big.Int) (*big.Int, error) {
	return _BMerc1155.Contract.TotalSupply0(&_BMerc1155.CallOpts, id)
}

// Uri is a free data retrieval call binding the contract method 0x0e89341c.
//
// Solidity: function uri(uint256 ) view returns(string)
func (_BMerc1155 *BMerc1155Caller) Uri(opts *bind.CallOpts, arg0 *big.Int) (string, error) {
	var out []interface{}
	err := _BMerc1155.contract.Call(opts, &out, "uri", arg0)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Uri is a free data retrieval call binding the contract method 0x0e89341c.
//
// Solidity: function uri(uint256 ) view returns(string)
func (_BMerc1155 *BMerc1155Session) Uri(arg0 *big.Int) (string, error) {
	return _BMerc1155.Contract.Uri(&_BMerc1155.CallOpts, arg0)
}

// Uri is a free data retrieval call binding the contract method 0x0e89341c.
//
// Solidity: function uri(uint256 ) view returns(string)
func (_BMerc1155 *BMerc1155CallerSession) Uri(arg0 *big.Int) (string, error) {
	return _BMerc1155.Contract.Uri(&_BMerc1155.CallOpts, arg0)
}

// Delegate is a paid mutator transaction binding the contract method 0x5c19a95c.
//
// Solidity: function delegate(address delegatee) returns()
func (_BMerc1155 *BMerc1155Transactor) Delegate(opts *bind.TransactOpts, delegatee common.Address) (*types.Transaction, error) {
	return _BMerc1155.contract.Transact(opts, "delegate", delegatee)
}

// Delegate is a paid mutator transaction binding the contract method 0x5c19a95c.
//
// Solidity: function delegate(address delegatee) returns()
func (_BMerc1155 *BMerc1155Session) Delegate(delegatee common.Address) (*types.Transaction, error) {
	return _BMerc1155.Contract.Delegate(&_BMerc1155.TransactOpts, delegatee)
}

// Delegate is a paid mutator transaction binding the contract method 0x5c19a95c.
//
// Solidity: function delegate(address delegatee) returns()
func (_BMerc1155 *BMerc1155TransactorSession) Delegate(delegatee common.Address) (*types.Transaction, error) {
	return _BMerc1155.Contract.Delegate(&_BMerc1155.TransactOpts, delegatee)
}

// DelegateByOwner is a paid mutator transaction binding the contract method 0x6044ae90.
//
// Solidity: function delegateByOwner(address account) returns()
func (_BMerc1155 *BMerc1155Transactor) DelegateByOwner(opts *bind.TransactOpts, account common.Address) (*types.Transaction, error) {
	return _BMerc1155.contract.Transact(opts, "delegateByOwner", account)
}

// DelegateByOwner is a paid mutator transaction binding the contract method 0x6044ae90.
//
// Solidity: function delegateByOwner(address account) returns()
func (_BMerc1155 *BMerc1155Session) DelegateByOwner(account common.Address) (*types.Transaction, error) {
	return _BMerc1155.Contract.DelegateByOwner(&_BMerc1155.TransactOpts, account)
}

// DelegateByOwner is a paid mutator transaction binding the contract method 0x6044ae90.
//
// Solidity: function delegateByOwner(address account) returns()
func (_BMerc1155 *BMerc1155TransactorSession) DelegateByOwner(account common.Address) (*types.Transaction, error) {
	return _BMerc1155.Contract.DelegateByOwner(&_BMerc1155.TransactOpts, account)
}

// DelegateBySig is a paid mutator transaction binding the contract method 0xc3cda520.
//
// Solidity: function delegateBySig(address delegatee, uint256 nonce, uint256 expiry, uint8 v, bytes32 r, bytes32 s) returns()
func (_BMerc1155 *BMerc1155Transactor) DelegateBySig(opts *bind.TransactOpts, delegatee common.Address, nonce *big.Int, expiry *big.Int, v uint8, r [32]byte, s [32]byte) (*types.Transaction, error) {
	return _BMerc1155.contract.Transact(opts, "delegateBySig", delegatee, nonce, expiry, v, r, s)
}

// DelegateBySig is a paid mutator transaction binding the contract method 0xc3cda520.
//
// Solidity: function delegateBySig(address delegatee, uint256 nonce, uint256 expiry, uint8 v, bytes32 r, bytes32 s) returns()
func (_BMerc1155 *BMerc1155Session) DelegateBySig(delegatee common.Address, nonce *big.Int, expiry *big.Int, v uint8, r [32]byte, s [32]byte) (*types.Transaction, error) {
	return _BMerc1155.Contract.DelegateBySig(&_BMerc1155.TransactOpts, delegatee, nonce, expiry, v, r, s)
}

// DelegateBySig is a paid mutator transaction binding the contract method 0xc3cda520.
//
// Solidity: function delegateBySig(address delegatee, uint256 nonce, uint256 expiry, uint8 v, bytes32 r, bytes32 s) returns()
func (_BMerc1155 *BMerc1155TransactorSession) DelegateBySig(delegatee common.Address, nonce *big.Int, expiry *big.Int, v uint8, r [32]byte, s [32]byte) (*types.Transaction, error) {
	return _BMerc1155.Contract.DelegateBySig(&_BMerc1155.TransactOpts, delegatee, nonce, expiry, v, r, s)
}

// Mint is a paid mutator transaction binding the contract method 0x6a627842.
//
// Solidity: function mint(address account) returns()
func (_BMerc1155 *BMerc1155Transactor) Mint(opts *bind.TransactOpts, account common.Address) (*types.Transaction, error) {
	return _BMerc1155.contract.Transact(opts, "mint", account)
}

// Mint is a paid mutator transaction binding the contract method 0x6a627842.
//
// Solidity: function mint(address account) returns()
func (_BMerc1155 *BMerc1155Session) Mint(account common.Address) (*types.Transaction, error) {
	return _BMerc1155.Contract.Mint(&_BMerc1155.TransactOpts, account)
}

// Mint is a paid mutator transaction binding the contract method 0x6a627842.
//
// Solidity: function mint(address account) returns()
func (_BMerc1155 *BMerc1155TransactorSession) Mint(account common.Address) (*types.Transaction, error) {
	return _BMerc1155.Contract.Mint(&_BMerc1155.TransactOpts, account)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_BMerc1155 *BMerc1155Transactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BMerc1155.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_BMerc1155 *BMerc1155Session) RenounceOwnership() (*types.Transaction, error) {
	return _BMerc1155.Contract.RenounceOwnership(&_BMerc1155.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_BMerc1155 *BMerc1155TransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _BMerc1155.Contract.RenounceOwnership(&_BMerc1155.TransactOpts)
}

// SafeBatchTransferFrom is a paid mutator transaction binding the contract method 0x2eb2c2d6.
//
// Solidity: function safeBatchTransferFrom(address from, address to, uint256[] ids, uint256[] values, bytes data) returns()
func (_BMerc1155 *BMerc1155Transactor) SafeBatchTransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, ids []*big.Int, values []*big.Int, data []byte) (*types.Transaction, error) {
	return _BMerc1155.contract.Transact(opts, "safeBatchTransferFrom", from, to, ids, values, data)
}

// SafeBatchTransferFrom is a paid mutator transaction binding the contract method 0x2eb2c2d6.
//
// Solidity: function safeBatchTransferFrom(address from, address to, uint256[] ids, uint256[] values, bytes data) returns()
func (_BMerc1155 *BMerc1155Session) SafeBatchTransferFrom(from common.Address, to common.Address, ids []*big.Int, values []*big.Int, data []byte) (*types.Transaction, error) {
	return _BMerc1155.Contract.SafeBatchTransferFrom(&_BMerc1155.TransactOpts, from, to, ids, values, data)
}

// SafeBatchTransferFrom is a paid mutator transaction binding the contract method 0x2eb2c2d6.
//
// Solidity: function safeBatchTransferFrom(address from, address to, uint256[] ids, uint256[] values, bytes data) returns()
func (_BMerc1155 *BMerc1155TransactorSession) SafeBatchTransferFrom(from common.Address, to common.Address, ids []*big.Int, values []*big.Int, data []byte) (*types.Transaction, error) {
	return _BMerc1155.Contract.SafeBatchTransferFrom(&_BMerc1155.TransactOpts, from, to, ids, values, data)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0xf242432a.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 id, uint256 value, bytes data) returns()
func (_BMerc1155 *BMerc1155Transactor) SafeTransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, id *big.Int, value *big.Int, data []byte) (*types.Transaction, error) {
	return _BMerc1155.contract.Transact(opts, "safeTransferFrom", from, to, id, value, data)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0xf242432a.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 id, uint256 value, bytes data) returns()
func (_BMerc1155 *BMerc1155Session) SafeTransferFrom(from common.Address, to common.Address, id *big.Int, value *big.Int, data []byte) (*types.Transaction, error) {
	return _BMerc1155.Contract.SafeTransferFrom(&_BMerc1155.TransactOpts, from, to, id, value, data)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0xf242432a.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 id, uint256 value, bytes data) returns()
func (_BMerc1155 *BMerc1155TransactorSession) SafeTransferFrom(from common.Address, to common.Address, id *big.Int, value *big.Int, data []byte) (*types.Transaction, error) {
	return _BMerc1155.Contract.SafeTransferFrom(&_BMerc1155.TransactOpts, from, to, id, value, data)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_BMerc1155 *BMerc1155Transactor) SetApprovalForAll(opts *bind.TransactOpts, operator common.Address, approved bool) (*types.Transaction, error) {
	return _BMerc1155.contract.Transact(opts, "setApprovalForAll", operator, approved)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_BMerc1155 *BMerc1155Session) SetApprovalForAll(operator common.Address, approved bool) (*types.Transaction, error) {
	return _BMerc1155.Contract.SetApprovalForAll(&_BMerc1155.TransactOpts, operator, approved)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_BMerc1155 *BMerc1155TransactorSession) SetApprovalForAll(operator common.Address, approved bool) (*types.Transaction, error) {
	return _BMerc1155.Contract.SetApprovalForAll(&_BMerc1155.TransactOpts, operator, approved)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_BMerc1155 *BMerc1155Transactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _BMerc1155.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_BMerc1155 *BMerc1155Session) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _BMerc1155.Contract.TransferOwnership(&_BMerc1155.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_BMerc1155 *BMerc1155TransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _BMerc1155.Contract.TransferOwnership(&_BMerc1155.TransactOpts, newOwner)
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_BMerc1155 *BMerc1155Transactor) Receive(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BMerc1155.contract.RawTransact(opts, nil) // calldata is disallowed for receive function
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_BMerc1155 *BMerc1155Session) Receive() (*types.Transaction, error) {
	return _BMerc1155.Contract.Receive(&_BMerc1155.TransactOpts)
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_BMerc1155 *BMerc1155TransactorSession) Receive() (*types.Transaction, error) {
	return _BMerc1155.Contract.Receive(&_BMerc1155.TransactOpts)
}

// BMerc1155ApprovalForAllIterator is returned from FilterApprovalForAll and is used to iterate over the raw logs and unpacked data for ApprovalForAll events raised by the BMerc1155 contract.
type BMerc1155ApprovalForAllIterator struct {
	Event *BMerc1155ApprovalForAll // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BMerc1155ApprovalForAllIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BMerc1155ApprovalForAll)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BMerc1155ApprovalForAll)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BMerc1155ApprovalForAllIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BMerc1155ApprovalForAllIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BMerc1155ApprovalForAll represents a ApprovalForAll event raised by the BMerc1155 contract.
type BMerc1155ApprovalForAll struct {
	Account  common.Address
	Operator common.Address
	Approved bool
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterApprovalForAll is a free log retrieval operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed account, address indexed operator, bool approved)
func (_BMerc1155 *BMerc1155Filterer) FilterApprovalForAll(opts *bind.FilterOpts, account []common.Address, operator []common.Address) (*BMerc1155ApprovalForAllIterator, error) {

	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _BMerc1155.contract.FilterLogs(opts, "ApprovalForAll", accountRule, operatorRule)
	if err != nil {
		return nil, err
	}
	return &BMerc1155ApprovalForAllIterator{contract: _BMerc1155.contract, event: "ApprovalForAll", logs: logs, sub: sub}, nil
}

// WatchApprovalForAll is a free log subscription operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed account, address indexed operator, bool approved)
func (_BMerc1155 *BMerc1155Filterer) WatchApprovalForAll(opts *bind.WatchOpts, sink chan<- *BMerc1155ApprovalForAll, account []common.Address, operator []common.Address) (event.Subscription, error) {

	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _BMerc1155.contract.WatchLogs(opts, "ApprovalForAll", accountRule, operatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BMerc1155ApprovalForAll)
				if err := _BMerc1155.contract.UnpackLog(event, "ApprovalForAll", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApprovalForAll is a log parse operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed account, address indexed operator, bool approved)
func (_BMerc1155 *BMerc1155Filterer) ParseApprovalForAll(log types.Log) (*BMerc1155ApprovalForAll, error) {
	event := new(BMerc1155ApprovalForAll)
	if err := _BMerc1155.contract.UnpackLog(event, "ApprovalForAll", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BMerc1155DelegateChangedIterator is returned from FilterDelegateChanged and is used to iterate over the raw logs and unpacked data for DelegateChanged events raised by the BMerc1155 contract.
type BMerc1155DelegateChangedIterator struct {
	Event *BMerc1155DelegateChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BMerc1155DelegateChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BMerc1155DelegateChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BMerc1155DelegateChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BMerc1155DelegateChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BMerc1155DelegateChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BMerc1155DelegateChanged represents a DelegateChanged event raised by the BMerc1155 contract.
type BMerc1155DelegateChanged struct {
	Delegator    common.Address
	FromDelegate common.Address
	ToDelegate   common.Address
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterDelegateChanged is a free log retrieval operation binding the contract event 0x3134e8a2e6d97e929a7e54011ea5485d7d196dd5f0ba4d4ef95803e8e3fc257f.
//
// Solidity: event DelegateChanged(address indexed delegator, address indexed fromDelegate, address indexed toDelegate)
func (_BMerc1155 *BMerc1155Filterer) FilterDelegateChanged(opts *bind.FilterOpts, delegator []common.Address, fromDelegate []common.Address, toDelegate []common.Address) (*BMerc1155DelegateChangedIterator, error) {

	var delegatorRule []interface{}
	for _, delegatorItem := range delegator {
		delegatorRule = append(delegatorRule, delegatorItem)
	}
	var fromDelegateRule []interface{}
	for _, fromDelegateItem := range fromDelegate {
		fromDelegateRule = append(fromDelegateRule, fromDelegateItem)
	}
	var toDelegateRule []interface{}
	for _, toDelegateItem := range toDelegate {
		toDelegateRule = append(toDelegateRule, toDelegateItem)
	}

	logs, sub, err := _BMerc1155.contract.FilterLogs(opts, "DelegateChanged", delegatorRule, fromDelegateRule, toDelegateRule)
	if err != nil {
		return nil, err
	}
	return &BMerc1155DelegateChangedIterator{contract: _BMerc1155.contract, event: "DelegateChanged", logs: logs, sub: sub}, nil
}

// WatchDelegateChanged is a free log subscription operation binding the contract event 0x3134e8a2e6d97e929a7e54011ea5485d7d196dd5f0ba4d4ef95803e8e3fc257f.
//
// Solidity: event DelegateChanged(address indexed delegator, address indexed fromDelegate, address indexed toDelegate)
func (_BMerc1155 *BMerc1155Filterer) WatchDelegateChanged(opts *bind.WatchOpts, sink chan<- *BMerc1155DelegateChanged, delegator []common.Address, fromDelegate []common.Address, toDelegate []common.Address) (event.Subscription, error) {

	var delegatorRule []interface{}
	for _, delegatorItem := range delegator {
		delegatorRule = append(delegatorRule, delegatorItem)
	}
	var fromDelegateRule []interface{}
	for _, fromDelegateItem := range fromDelegate {
		fromDelegateRule = append(fromDelegateRule, fromDelegateItem)
	}
	var toDelegateRule []interface{}
	for _, toDelegateItem := range toDelegate {
		toDelegateRule = append(toDelegateRule, toDelegateItem)
	}

	logs, sub, err := _BMerc1155.contract.WatchLogs(opts, "DelegateChanged", delegatorRule, fromDelegateRule, toDelegateRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BMerc1155DelegateChanged)
				if err := _BMerc1155.contract.UnpackLog(event, "DelegateChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseDelegateChanged is a log parse operation binding the contract event 0x3134e8a2e6d97e929a7e54011ea5485d7d196dd5f0ba4d4ef95803e8e3fc257f.
//
// Solidity: event DelegateChanged(address indexed delegator, address indexed fromDelegate, address indexed toDelegate)
func (_BMerc1155 *BMerc1155Filterer) ParseDelegateChanged(log types.Log) (*BMerc1155DelegateChanged, error) {
	event := new(BMerc1155DelegateChanged)
	if err := _BMerc1155.contract.UnpackLog(event, "DelegateChanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BMerc1155DelegateVotesChangedIterator is returned from FilterDelegateVotesChanged and is used to iterate over the raw logs and unpacked data for DelegateVotesChanged events raised by the BMerc1155 contract.
type BMerc1155DelegateVotesChangedIterator struct {
	Event *BMerc1155DelegateVotesChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BMerc1155DelegateVotesChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BMerc1155DelegateVotesChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BMerc1155DelegateVotesChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BMerc1155DelegateVotesChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BMerc1155DelegateVotesChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BMerc1155DelegateVotesChanged represents a DelegateVotesChanged event raised by the BMerc1155 contract.
type BMerc1155DelegateVotesChanged struct {
	Delegate      common.Address
	PreviousVotes *big.Int
	NewVotes      *big.Int
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterDelegateVotesChanged is a free log retrieval operation binding the contract event 0xdec2bacdd2f05b59de34da9b523dff8be42e5e38e818c82fdb0bae774387a724.
//
// Solidity: event DelegateVotesChanged(address indexed delegate, uint256 previousVotes, uint256 newVotes)
func (_BMerc1155 *BMerc1155Filterer) FilterDelegateVotesChanged(opts *bind.FilterOpts, delegate []common.Address) (*BMerc1155DelegateVotesChangedIterator, error) {

	var delegateRule []interface{}
	for _, delegateItem := range delegate {
		delegateRule = append(delegateRule, delegateItem)
	}

	logs, sub, err := _BMerc1155.contract.FilterLogs(opts, "DelegateVotesChanged", delegateRule)
	if err != nil {
		return nil, err
	}
	return &BMerc1155DelegateVotesChangedIterator{contract: _BMerc1155.contract, event: "DelegateVotesChanged", logs: logs, sub: sub}, nil
}

// WatchDelegateVotesChanged is a free log subscription operation binding the contract event 0xdec2bacdd2f05b59de34da9b523dff8be42e5e38e818c82fdb0bae774387a724.
//
// Solidity: event DelegateVotesChanged(address indexed delegate, uint256 previousVotes, uint256 newVotes)
func (_BMerc1155 *BMerc1155Filterer) WatchDelegateVotesChanged(opts *bind.WatchOpts, sink chan<- *BMerc1155DelegateVotesChanged, delegate []common.Address) (event.Subscription, error) {

	var delegateRule []interface{}
	for _, delegateItem := range delegate {
		delegateRule = append(delegateRule, delegateItem)
	}

	logs, sub, err := _BMerc1155.contract.WatchLogs(opts, "DelegateVotesChanged", delegateRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BMerc1155DelegateVotesChanged)
				if err := _BMerc1155.contract.UnpackLog(event, "DelegateVotesChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseDelegateVotesChanged is a log parse operation binding the contract event 0xdec2bacdd2f05b59de34da9b523dff8be42e5e38e818c82fdb0bae774387a724.
//
// Solidity: event DelegateVotesChanged(address indexed delegate, uint256 previousVotes, uint256 newVotes)
func (_BMerc1155 *BMerc1155Filterer) ParseDelegateVotesChanged(log types.Log) (*BMerc1155DelegateVotesChanged, error) {
	event := new(BMerc1155DelegateVotesChanged)
	if err := _BMerc1155.contract.UnpackLog(event, "DelegateVotesChanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BMerc1155EIP712DomainChangedIterator is returned from FilterEIP712DomainChanged and is used to iterate over the raw logs and unpacked data for EIP712DomainChanged events raised by the BMerc1155 contract.
type BMerc1155EIP712DomainChangedIterator struct {
	Event *BMerc1155EIP712DomainChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BMerc1155EIP712DomainChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BMerc1155EIP712DomainChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BMerc1155EIP712DomainChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BMerc1155EIP712DomainChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BMerc1155EIP712DomainChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BMerc1155EIP712DomainChanged represents a EIP712DomainChanged event raised by the BMerc1155 contract.
type BMerc1155EIP712DomainChanged struct {
	Raw types.Log // Blockchain specific contextual infos
}

// FilterEIP712DomainChanged is a free log retrieval operation binding the contract event 0x0a6387c9ea3628b88a633bb4f3b151770f70085117a15f9bf3787cda53f13d31.
//
// Solidity: event EIP712DomainChanged()
func (_BMerc1155 *BMerc1155Filterer) FilterEIP712DomainChanged(opts *bind.FilterOpts) (*BMerc1155EIP712DomainChangedIterator, error) {

	logs, sub, err := _BMerc1155.contract.FilterLogs(opts, "EIP712DomainChanged")
	if err != nil {
		return nil, err
	}
	return &BMerc1155EIP712DomainChangedIterator{contract: _BMerc1155.contract, event: "EIP712DomainChanged", logs: logs, sub: sub}, nil
}

// WatchEIP712DomainChanged is a free log subscription operation binding the contract event 0x0a6387c9ea3628b88a633bb4f3b151770f70085117a15f9bf3787cda53f13d31.
//
// Solidity: event EIP712DomainChanged()
func (_BMerc1155 *BMerc1155Filterer) WatchEIP712DomainChanged(opts *bind.WatchOpts, sink chan<- *BMerc1155EIP712DomainChanged) (event.Subscription, error) {

	logs, sub, err := _BMerc1155.contract.WatchLogs(opts, "EIP712DomainChanged")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BMerc1155EIP712DomainChanged)
				if err := _BMerc1155.contract.UnpackLog(event, "EIP712DomainChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseEIP712DomainChanged is a log parse operation binding the contract event 0x0a6387c9ea3628b88a633bb4f3b151770f70085117a15f9bf3787cda53f13d31.
//
// Solidity: event EIP712DomainChanged()
func (_BMerc1155 *BMerc1155Filterer) ParseEIP712DomainChanged(log types.Log) (*BMerc1155EIP712DomainChanged, error) {
	event := new(BMerc1155EIP712DomainChanged)
	if err := _BMerc1155.contract.UnpackLog(event, "EIP712DomainChanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BMerc1155OwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the BMerc1155 contract.
type BMerc1155OwnershipTransferredIterator struct {
	Event *BMerc1155OwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BMerc1155OwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BMerc1155OwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BMerc1155OwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BMerc1155OwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BMerc1155OwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BMerc1155OwnershipTransferred represents a OwnershipTransferred event raised by the BMerc1155 contract.
type BMerc1155OwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_BMerc1155 *BMerc1155Filterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*BMerc1155OwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _BMerc1155.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &BMerc1155OwnershipTransferredIterator{contract: _BMerc1155.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_BMerc1155 *BMerc1155Filterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *BMerc1155OwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _BMerc1155.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BMerc1155OwnershipTransferred)
				if err := _BMerc1155.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_BMerc1155 *BMerc1155Filterer) ParseOwnershipTransferred(log types.Log) (*BMerc1155OwnershipTransferred, error) {
	event := new(BMerc1155OwnershipTransferred)
	if err := _BMerc1155.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BMerc1155TransferBatchIterator is returned from FilterTransferBatch and is used to iterate over the raw logs and unpacked data for TransferBatch events raised by the BMerc1155 contract.
type BMerc1155TransferBatchIterator struct {
	Event *BMerc1155TransferBatch // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BMerc1155TransferBatchIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BMerc1155TransferBatch)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BMerc1155TransferBatch)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BMerc1155TransferBatchIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BMerc1155TransferBatchIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BMerc1155TransferBatch represents a TransferBatch event raised by the BMerc1155 contract.
type BMerc1155TransferBatch struct {
	Operator common.Address
	From     common.Address
	To       common.Address
	Ids      []*big.Int
	Values   []*big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterTransferBatch is a free log retrieval operation binding the contract event 0x4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb.
//
// Solidity: event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values)
func (_BMerc1155 *BMerc1155Filterer) FilterTransferBatch(opts *bind.FilterOpts, operator []common.Address, from []common.Address, to []common.Address) (*BMerc1155TransferBatchIterator, error) {

	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _BMerc1155.contract.FilterLogs(opts, "TransferBatch", operatorRule, fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &BMerc1155TransferBatchIterator{contract: _BMerc1155.contract, event: "TransferBatch", logs: logs, sub: sub}, nil
}

// WatchTransferBatch is a free log subscription operation binding the contract event 0x4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb.
//
// Solidity: event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values)
func (_BMerc1155 *BMerc1155Filterer) WatchTransferBatch(opts *bind.WatchOpts, sink chan<- *BMerc1155TransferBatch, operator []common.Address, from []common.Address, to []common.Address) (event.Subscription, error) {

	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _BMerc1155.contract.WatchLogs(opts, "TransferBatch", operatorRule, fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BMerc1155TransferBatch)
				if err := _BMerc1155.contract.UnpackLog(event, "TransferBatch", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransferBatch is a log parse operation binding the contract event 0x4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb.
//
// Solidity: event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values)
func (_BMerc1155 *BMerc1155Filterer) ParseTransferBatch(log types.Log) (*BMerc1155TransferBatch, error) {
	event := new(BMerc1155TransferBatch)
	if err := _BMerc1155.contract.UnpackLog(event, "TransferBatch", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BMerc1155TransferSingleIterator is returned from FilterTransferSingle and is used to iterate over the raw logs and unpacked data for TransferSingle events raised by the BMerc1155 contract.
type BMerc1155TransferSingleIterator struct {
	Event *BMerc1155TransferSingle // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BMerc1155TransferSingleIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BMerc1155TransferSingle)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BMerc1155TransferSingle)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BMerc1155TransferSingleIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BMerc1155TransferSingleIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BMerc1155TransferSingle represents a TransferSingle event raised by the BMerc1155 contract.
type BMerc1155TransferSingle struct {
	Operator common.Address
	From     common.Address
	To       common.Address
	Id       *big.Int
	Value    *big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterTransferSingle is a free log retrieval operation binding the contract event 0xc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62.
//
// Solidity: event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value)
func (_BMerc1155 *BMerc1155Filterer) FilterTransferSingle(opts *bind.FilterOpts, operator []common.Address, from []common.Address, to []common.Address) (*BMerc1155TransferSingleIterator, error) {

	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _BMerc1155.contract.FilterLogs(opts, "TransferSingle", operatorRule, fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &BMerc1155TransferSingleIterator{contract: _BMerc1155.contract, event: "TransferSingle", logs: logs, sub: sub}, nil
}

// WatchTransferSingle is a free log subscription operation binding the contract event 0xc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62.
//
// Solidity: event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value)
func (_BMerc1155 *BMerc1155Filterer) WatchTransferSingle(opts *bind.WatchOpts, sink chan<- *BMerc1155TransferSingle, operator []common.Address, from []common.Address, to []common.Address) (event.Subscription, error) {

	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _BMerc1155.contract.WatchLogs(opts, "TransferSingle", operatorRule, fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BMerc1155TransferSingle)
				if err := _BMerc1155.contract.UnpackLog(event, "TransferSingle", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransferSingle is a log parse operation binding the contract event 0xc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62.
//
// Solidity: event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value)
func (_BMerc1155 *BMerc1155Filterer) ParseTransferSingle(log types.Log) (*BMerc1155TransferSingle, error) {
	event := new(BMerc1155TransferSingle)
	if err := _BMerc1155.contract.UnpackLog(event, "TransferSingle", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BMerc1155URIIterator is returned from FilterURI and is used to iterate over the raw logs and unpacked data for URI events raised by the BMerc1155 contract.
type BMerc1155URIIterator struct {
	Event *BMerc1155URI // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BMerc1155URIIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BMerc1155URI)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BMerc1155URI)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BMerc1155URIIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BMerc1155URIIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BMerc1155URI represents a URI event raised by the BMerc1155 contract.
type BMerc1155URI struct {
	Value string
	Id    *big.Int
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterURI is a free log retrieval operation binding the contract event 0x6bb7ff708619ba0610cba295a58592e0451dee2622938c8755667688daf3529b.
//
// Solidity: event URI(string value, uint256 indexed id)
func (_BMerc1155 *BMerc1155Filterer) FilterURI(opts *bind.FilterOpts, id []*big.Int) (*BMerc1155URIIterator, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}

	logs, sub, err := _BMerc1155.contract.FilterLogs(opts, "URI", idRule)
	if err != nil {
		return nil, err
	}
	return &BMerc1155URIIterator{contract: _BMerc1155.contract, event: "URI", logs: logs, sub: sub}, nil
}

// WatchURI is a free log subscription operation binding the contract event 0x6bb7ff708619ba0610cba295a58592e0451dee2622938c8755667688daf3529b.
//
// Solidity: event URI(string value, uint256 indexed id)
func (_BMerc1155 *BMerc1155Filterer) WatchURI(opts *bind.WatchOpts, sink chan<- *BMerc1155URI, id []*big.Int) (event.Subscription, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}

	logs, sub, err := _BMerc1155.contract.WatchLogs(opts, "URI", idRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BMerc1155URI)
				if err := _BMerc1155.contract.UnpackLog(event, "URI", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseURI is a log parse operation binding the contract event 0x6bb7ff708619ba0610cba295a58592e0451dee2622938c8755667688daf3529b.
//
// Solidity: event URI(string value, uint256 indexed id)
func (_BMerc1155 *BMerc1155Filterer) ParseURI(log types.Log) (*BMerc1155URI, error) {
	event := new(BMerc1155URI)
	if err := _BMerc1155.contract.UnpackLog(event, "URI", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
