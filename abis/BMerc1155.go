// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package abis

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// BmErc1155MetaData contains all meta data concerning the BmErc1155 contract.
var BmErc1155MetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"version\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"uri_\",\"type\":\"string\"},{\"internalType\":\"contractIERC20\",\"name\":\"erc20_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"governor\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AddressInsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"arg\",\"type\":\"string\"}],\"name\":\"BmErc1155NilInput\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"delegates\",\"type\":\"address\"}],\"name\":\"BmErcAlreadyDelegateOther\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ECDSAInvalidSignature\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"length\",\"type\":\"uint256\"}],\"name\":\"ECDSAInvalidSignatureLength\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"ECDSAInvalidSignatureS\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC1155InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC1155InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"idsLength\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"valuesLength\",\"type\":\"uint256\"}],\"name\":\"ERC1155InvalidArrayLength\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"ERC1155InvalidOperator\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC1155InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC1155InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC1155MissingApprovalForAll\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"timepoint\",\"type\":\"uint256\"},{\"internalType\":\"uint48\",\"name\":\"clock\",\"type\":\"uint48\"}],\"name\":\"ERC5805FutureLookup\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC6372InconsistentClock\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedInnerCall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"currentNonce\",\"type\":\"uint256\"}],\"name\":\"InvalidAccountNonce\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidShortString\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"bits\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"SafeCastOverflowedUintDowncast\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"str\",\"type\":\"string\"}],\"name\":\"StringTooLong\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"}],\"name\":\"VotesExpiredSignature\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fromDelegate\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"toDelegate\",\"type\":\"address\"}],\"name\":\"DelegateChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previousVotes\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newVotes\",\"type\":\"uint256\"}],\"name\":\"DelegateVotesChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"EIP712DomainChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CLOCK_MODE\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"burnBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"clock\",\"outputs\":[{\"internalType\":\"uint48\",\"name\":\"\",\"type\":\"uint48\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegatee\",\"type\":\"address\"}],\"name\":\"delegate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"delegateByOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegatee\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"delegateBySig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"delegates\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"delegates\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"eip712Domain\",\"outputs\":[{\"internalType\":\"bytes1\",\"name\":\"fields\",\"type\":\"bytes1\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"version\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"verifyingContract\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"},{\"internalType\":\"uint256[]\",\"name\":\"extensions\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"exists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"timepoint\",\"type\":\"uint256\"}],\"name\":\"getPastTotalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"timepoint\",\"type\":\"uint256\"}],\"name\":\"getPastVotes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getVotes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"mintedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"timepoint\",\"type\":\"uint256\"}],\"name\":\"timepointID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]",
	Bin: "0x6101a060405234801562000011575f80fd5b5060405162002f5538038062002f5583398101604081905262000034916200034d565b80858585620000438162000192565b5062000051826005620001a4565b6101205262000062816006620001a4565b61014052815160208084019190912060e052815190820120610100524660a052620000ef60e05161010051604080517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f60208201529081019290925260608201524660808201523060a08201525f9060c00160405160208183030381529060405280519060200120905090565b60805250503060c0526001600160a01b0381166200012757604051631e4fbdf760e01b81525f60048201526024015b60405180910390fd5b6200013281620001dc565b506001600160a01b038216620001755760405163524a43df60e01b815260206004820152600660248201526565726332305f60d01b60448201526064016200011e565b5033610160526001600160a01b03166101805250620005b2915050565b6002620001a082826200048e565b5050565b5f602083511015620001c357620001bb836200022d565b9050620001d6565b81620001d084826200048e565b5060ff90505b92915050565b600880546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0905f90a35050565b5f80829050601f815111156200025a578260405163305a27a960e01b81526004016200011e91906200055a565b805162000267826200058e565b179392505050565b634e487b7160e01b5f52604160045260245ffd5b5f5b838110156200029f57818101518382015260200162000285565b50505f910152565b5f82601f830112620002b7575f80fd5b81516001600160401b0380821115620002d457620002d46200026f565b604051601f8301601f19908116603f01168101908282118183101715620002ff57620002ff6200026f565b8160405283815286602085880101111562000318575f80fd5b6200032b84602083016020890162000283565b9695505050505050565b6001600160a01b03811681146200034a575f80fd5b50565b5f805f805f60a0868803121562000362575f80fd5b85516001600160401b038082111562000379575f80fd5b6200038789838a01620002a7565b965060208801519150808211156200039d575f80fd5b620003ab89838a01620002a7565b95506040880151915080821115620003c1575f80fd5b50620003d088828901620002a7565b9350506060860151620003e38162000335565b6080870151909250620003f68162000335565b809150509295509295909350565b600181811c908216806200041957607f821691505b6020821081036200043857634e487b7160e01b5f52602260045260245ffd5b50919050565b601f8211156200048957805f5260205f20601f840160051c81016020851015620004655750805b601f840160051c820191505b8181101562000486575f815560010162000471565b50505b505050565b81516001600160401b03811115620004aa57620004aa6200026f565b620004c281620004bb845462000404565b846200043e565b602080601f831160018114620004f8575f8415620004e05750858301515b5f19600386901b1c1916600185901b17855562000552565b5f85815260208120601f198616915b82811015620005285788860151825594840194600190910190840162000507565b50858210156200054657878501515f19600388901b60f8161c191681555b505060018460011b0185555b505050505050565b602081525f82518060208401526200057a81604085016020870162000283565b601f01601f19169190910160400192915050565b8051602080830151919081101562000438575f1960209190910360031b1b16919050565b60805160a05160c05160e051610100516101205161014051610160516101805161293d620006185f395f610a9201525f611dc601525f61112501525f6110f801525f6116c401525f61169c01525f6115f701525f61162101525f61164b015261293d5ff3fe6080604052600436106101dd575f3560e01c80637642b04f116100fd578063bd85b03911610092578063e985e9c511610062578063e985e9c5146105cf578063f242432a146105ee578063f2fde38b1461060d578063f5298aca1461062c575f80fd5b8063bd85b03914610530578063bfb30e461461055b578063c3cda52014610591578063c47e0252146105b0575f80fd5b80638e539e8c116100cd5780638e539e8c146104a857806391ddadf4146104c75780639ab24eb0146104f2578063a22cb46514610511575f80fd5b80637642b04f146104115780637ecebe001461043057806384b0196e146104645780638da5cb5b1461048b575f80fd5b80634e1273f4116101735780636044ae90116101435780636044ae90146103a05780636a627842146103bf5780636b20c454146103de578063715018a6146103fd575f80fd5b80634e1273f4146102f15780634f558e791461031d578063587cde1e1461034a5780635c19a95c14610381575f80fd5b80631c75cfb4116101ae5780631c75cfb4146102895780632eb2c2d61461029d5780633a46b1a8146102be5780634bf5d7e9146102dd575f80fd5b8062fdd58e146101e857806301ffc9a71461021a5780630e89341c1461024957806318160ddd14610275575f80fd5b366101e457005b5f80fd5b3480156101f3575f80fd5b506102076102023660046120ed565b61064b565b6040519081526020015b60405180910390f35b348015610225575f80fd5b5061023961023436600461212a565b610672565b6040519015158152602001610211565b348015610254575f80fd5b50610268610263366004612145565b6106c1565b604051610211919061219f565b348015610280575f80fd5b50600454610207565b348015610294575f80fd5b50610207610753565b3480156102a8575f80fd5b506102bc6102b73660046122f1565b610777565b005b3480156102c9575f80fd5b506102076102d83660046120ed565b6107e3565b3480156102e8575f80fd5b5061026861086a565b3480156102fc575f80fd5b5061031061030b366004612394565b6108e2565b6040516102119190612488565b348015610328575f80fd5b50610239610337366004612145565b5f90815260036020526040902054151590565b348015610355575f80fd5b5061036961036436600461249a565b6109ad565b6040516001600160a01b039091168152602001610211565b34801561038c575f80fd5b506102bc61039b36600461249a565b6109e8565b3480156103ab575f80fd5b506102bc6103ba36600461249a565b6109f7565b3480156103ca575f80fd5b506102bc6103d936600461249a565b610a71565b3480156103e9575f80fd5b506102bc6103f83660046124b3565b610b7c565b348015610408575f80fd5b506102bc610be0565b34801561041c575f80fd5b5061020761042b366004612145565b610bf3565b34801561043b575f80fd5b5061020761044a36600461249a565b6001600160a01b03165f9081526007602052604090205490565b34801561046f575f80fd5b50610478610c01565b6040516102119796959493929190612522565b348015610496575f80fd5b506008546001600160a01b0316610369565b3480156104b3575f80fd5b506102076104c2366004612145565b610c43565b3480156104d2575f80fd5b506104db610c80565b60405165ffffffffffff9091168152602001610211565b3480156104fd575f80fd5b5061020761050c36600461249a565b610c89565b34801561051c575f80fd5b506102bc61052b366004612591565b610ccc565b34801561053b575f80fd5b5061020761054a366004612145565b5f9081526003602052604090205490565b348015610566575f80fd5b506102076105753660046125ca565b600b60209081525f928352604080842090915290825290205481565b34801561059c575f80fd5b506102bc6105ab3660046125f4565b610cd7565b3480156105bb575f80fd5b506103696105ca3660046125ca565b610d93565b3480156105da575f80fd5b506102396105e936600461264f565b610dbb565b3480156105f9575f80fd5b506102bc610608366004612677565b610de8565b348015610618575f80fd5b506102bc61062736600461249a565b610e47565b348015610637575f80fd5b506102bc6106463660046126d7565b610e84565b5f818152602081815260408083206001600160a01b03861684529091529020545b92915050565b5f6001600160e01b03198216636cdb3d1360e11b14806106a257506001600160e01b031982166303a24d0760e21b145b8061066c57506301ffc9a760e01b6001600160e01b031983161461066c565b6060600280546106d090612707565b80601f01602080910402602001604051908101604052809291908181526020018280546106fc90612707565b80156107475780601f1061071e57610100808354040283529160200191610747565b820191905f5260205f20905b81548152906001019060200180831161072a57829003601f168201915b50505050509050919050565b5f62093a80610760610c80565b65ffffffffffff166107729190612753565b905090565b336001600160a01b038616811480159061079857506107968682610dbb565b155b156107ce5760405163711bec9160e11b81526001600160a01b038083166004830152871660248201526044015b60405180910390fd5b6107db8686868686610eba565b505050505050565b5f805f6107ee610753565b6107f785610bf3565b9150915081811115610836578361080c610c80565b604051637669fc0f60e11b8152600481019290925265ffffffffffff1660248201526044016107c5565b5f908152600a602090815260408083206001600160a01b03881684529091529020546001600160d01b031691505092915050565b6060610874610f18565b65ffffffffffff16610884610c80565b65ffffffffffff16146108aa576040516301bfc1c560e61b815260040160405180910390fd5b5060408051808201909152601b81527f6d6f64653d74696d657374616d702666726f6d3d64656661756c740000000000602082015290565b606081518351146109135781518351604051635b05999160e01b8152600481019290925260248201526044016107c5565b5f835167ffffffffffffffff81111561092e5761092e6121b1565b604051908082528060200260200182016040528015610957578160200160208202803683370190505b5090505f5b84518110156109a5576020808202860101516109809060208084028701015161064b565b82828151811061099257610992612772565b602090810291909101015260010161095c565b509392505050565b5f60095f6109b9610753565b815260208082019290925260409081015f9081206001600160a01b039586168252909252902054909116919050565b336109f38183610f22565b5050565b6109ff610fd5565b610a0881610a71565b5f610a12826109ad565b90506001600160a01b038116610a2c576109f38283610f22565b816001600160a01b0316816001600160a01b0316146109f35760405163a933befb60e01b81526001600160a01b038084166004830152821660248201526044016107c5565b6040516370a0823160e01b81526001600160a01b0382811660048301525f917f0000000000000000000000000000000000000000000000000000000000000000909116906370a0823190602401602060405180830381865afa158015610ad9573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610afd9190612786565b90505f610b08610753565b5f818152600b602090815260408083206001600160a01b038816845291829052909120549192509080841115610b75576001600160a01b0385165f908152602083905260409020849055610b758584610b61848861279d565b60405180602001604052805f815250611002565b5050505050565b6001600160a01b0383163314801590610b9c5750610b9a8333610dbb565b155b15610bd057335b60405163711bec9160e11b81526001600160a01b03918216600482015290841660248201526044016107c5565b610bdb83838361105d565b505050565b610be8610fd5565b610bf15f6110a0565b565b5f61066c62093a8083612753565b5f6060805f805f6060610c126110f1565b610c1a61111e565b604080515f80825260208201909252600f60f81b9b939a50919850469750309650945092509050565b5f805f610c4e610753565b610c5785610bf3565b9150915081811115610c6c578361080c610c80565b610c7861054a85610bf3565b949350505050565b5f610772610f18565b5f600a5f610c95610753565b815260208082019290925260409081015f9081206001600160a01b03909516815293909152909120546001600160d01b0316919050565b6109f333838361114b565b83421115610cfb57604051632341d78760e11b8152600481018590526024016107c5565b604080517fe48329057bfd03d55e49b547132e39cffd9c1820ad7b9d4c5307691425d15adf60208201526001600160a01b0388169181019190915260608101869052608081018590525f90610d7490610d6c9060a001604051602081830303815290604052805190602001206111df565b85858561120b565b9050610d808187611237565b610d8a8188610f22565b50505050505050565b5f9182526009602090815260408084206001600160a01b039384168552909152909120541690565b6001600160a01b039182165f90815260016020908152604080832093909416825291909152205460ff1690565b336001600160a01b0386168114801590610e095750610e078682610dbb565b155b15610e3a5760405163711bec9160e11b81526001600160a01b038083166004830152871660248201526044016107c5565b6107db8686868686611289565b610e4f610fd5565b6001600160a01b038116610e7857604051631e4fbdf760e01b81525f60048201526024016107c5565b610e81816110a0565b50565b6001600160a01b0383163314801590610ea45750610ea28333610dbb565b155b15610eaf5733610ba3565b610bdb83838361130c565b6001600160a01b038416610ee357604051632bfa23e760e11b81525f60048201526024016107c5565b6001600160a01b038516610f0b57604051626a0d4560e21b81525f60048201526024016107c5565b610b75858585858561136e565b5f610772426113c1565b5f610f2c836109ad565b9050610f418183610f3c866113f7565b611404565b816001600160a01b0316816001600160a01b0316846001600160a01b03167f3134e8a2e6d97e929a7e54011ea5485d7d196dd5f0ba4d4ef95803e8e3fc257f60405160405180910390a48160095f610f97610753565b815260208082019290925260409081015f9081206001600160a01b039788168252909252902080546001600160a01b03191691909416179092555050565b6008546001600160a01b03163314610bf15760405163118cdaa760e01b81523360048201526024016107c5565b6001600160a01b03841661102b57604051632bfa23e760e11b81525f60048201526024016107c5565b604080516001808252602082018690528183019081526060820185905260808201909252906107db5f8784848761136e565b6001600160a01b03831661108557604051626a0d4560e21b81525f60048201526024016107c5565b610bdb835f848460405180602001604052805f81525061136e565b600880546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0905f90a35050565b60606107727f00000000000000000000000000000000000000000000000000000000000000006005611542565b60606107727f00000000000000000000000000000000000000000000000000000000000000006006611542565b6001600160a01b0382166111735760405162ced3e160e81b81525f60048201526024016107c5565b6001600160a01b038381165f81815260016020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b5f61066c6111eb6115eb565b8360405161190160f01b8152600281019290925260228201526042902090565b5f805f8061121b88888888611714565b92509250925061122b82826117dc565b50909695505050505050565b6001600160a01b0382165f908152600760205260409020805460018101909155818114610bdb576040516301d4b62360e61b81526001600160a01b0384166004820152602481018290526044016107c5565b6001600160a01b0384166112b257604051632bfa23e760e11b81525f60048201526024016107c5565b6001600160a01b0385166112da57604051626a0d4560e21b81525f60048201526024016107c5565b60408051600180825260208201869052818301908152606082018590526080820190925290610d8a878784848761136e565b6001600160a01b03831661133457604051626a0d4560e21b81525f60048201526024016107c5565b604080516001808252602082018590528183019081526060820184905260a082019092525f60808201818152919291610b75918791859085905b61137a85858585611894565b6001600160a01b03841615610b7557825133906001036113b357602084810151908401516113ac838989858589611940565b50506107db565b6107db818787878787611a61565b5f65ffffffffffff8211156113f3576040516306dfcc6560e41b815260306004820152602481018390526044016107c5565b5090565b5f61066c82610202610753565b5f600a5f611410610753565b81526020019081526020015f209050826001600160a01b0316846001600160a01b03161415801561144057505f82115b1561153c576001600160a01b038416156114c3575f8061146c8387611b4861146788611b5a565b611b8d565b604080516001600160d01b038085168252831660208201529294509092506001600160a01b038816917fdec2bacdd2f05b59de34da9b523dff8be42e5e38e818c82fdb0bae774387a724910160405180910390a250505b6001600160a01b0383161561153c575f806114e58386611bfa61146788611b5a565b604080516001600160d01b038085168252831660208201529294509092506001600160a01b038716917fdec2bacdd2f05b59de34da9b523dff8be42e5e38e818c82fdb0bae774387a724910160405180910390a250505b50505050565b606060ff831461155c5761155583611c05565b905061066c565b81805461156890612707565b80601f016020809104026020016040519081016040528092919081815260200182805461159490612707565b80156115df5780601f106115b6576101008083540402835291602001916115df565b820191905f5260205f20905b8154815290600101906020018083116115c257829003601f168201915b5050505050905061066c565b5f306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614801561164357507f000000000000000000000000000000000000000000000000000000000000000046145b1561166d57507f000000000000000000000000000000000000000000000000000000000000000090565b610772604080517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f60208201527f0000000000000000000000000000000000000000000000000000000000000000918101919091527f000000000000000000000000000000000000000000000000000000000000000060608201524660808201523060a08201525f9060c00160405160208183030381529060405280519060200120905090565b5f80807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a084111561174d57505f915060039050826117d2565b604080515f808252602082018084528a905260ff891692820192909252606081018790526080810186905260019060a0016020604051602081039080840390855afa15801561179e573d5f803e3d5ffd5b5050604051601f1901519150506001600160a01b0381166117c957505f9250600191508290506117d2565b92505f91508190505b9450945094915050565b5f8260038111156117ef576117ef6127b0565b036117f8575050565b600182600381111561180c5761180c6127b0565b0361182a5760405163f645eedf60e01b815260040160405180910390fd5b600282600381111561183e5761183e6127b0565b0361185f5760405163fce698f760e01b8152600481018290526024016107c5565b6003826003811115611873576118736127b0565b036109f3576040516335e2f38360e21b8152600481018290526024016107c5565b6118a084848484611c42565b5f6118a9610753565b83519091505f5b81811015610d8a575f8582815181106118cb576118cb612772565b60200260200101519050808403611937575f848152600c60205260409020546001600160a01b0316611901576119018133611d7e565b61193761190e828a610d93565b611918838a610d93565b87858151811061192a5761192a612772565b6020026020010151611404565b506001016118b0565b6001600160a01b0384163b156107db5760405163f23a6e6160e01b81526001600160a01b0385169063f23a6e619061198490899089908890889088906004016127c4565b6020604051808303815f875af19250505080156119be575060408051601f3d908101601f191682019092526119bb91810190612808565b60015b611a25573d8080156119eb576040519150601f19603f3d011682016040523d82523d5f602084013e6119f0565b606091505b5080515f03611a1d57604051632bfa23e760e11b81526001600160a01b03861660048201526024016107c5565b805181602001fd5b6001600160e01b0319811663f23a6e6160e01b14610d8a57604051632bfa23e760e11b81526001600160a01b03861660048201526024016107c5565b6001600160a01b0384163b156107db5760405163bc197c8160e01b81526001600160a01b0385169063bc197c8190611aa59089908990889088908890600401612823565b6020604051808303815f875af1925050508015611adf575060408051601f3d908101601f19168201909252611adc91810190612808565b60015b611b0c573d8080156119eb576040519150601f19603f3d011682016040523d82523d5f602084013e6119f0565b6001600160e01b0319811663bc197c8160e01b14610d8a57604051632bfa23e760e11b81526001600160a01b03861660048201526024016107c5565b5f611b538284612880565b9392505050565b5f6001600160d01b038211156113f3576040516306dfcc6560e41b815260d06004820152602481018390526044016107c5565b6001600160a01b0383165f908152602085905260408120546001600160d01b031690611bbd828463ffffffff8716565b6001600160a01b03959095165f90815260209690965250604090942080546001600160d01b0319166001600160d01b038516179055509192909150565b5f611b5382846128a7565b60605f611c1183611e09565b6040805160208082528183019092529192505f91906020820181803683375050509182525060208101929092525090565b611c4e84848484611e30565b6001600160a01b038416611cf2575f805b8351811015611cd9575f838281518110611c7b57611c7b612772565b602002602001015190508060035f878581518110611c9b57611c9b612772565b602002602001015181526020019081526020015f205f828254611cbe91906128c7565b90915550611cce905081846128c7565b925050600101611c5f565b508060045f828254611ceb91906128c7565b9091555050505b6001600160a01b03831661153c575f805b8351811015611d6d575f838281518110611d1f57611d1f612772565b602002602001015190508060035f878581518110611d3f57611d3f612772565b60209081029190910181015182528101919091526040015f2080549190910390559190910190600101611d03565b506004805491909103905550505050565b5f828152600c6020526040902080546001600160a01b0319166001600160a01b038316179055478015610bdb575f611db7600a83612753565b9050611dec6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000168261203f565b61153c611df9828461279d565b6001600160a01b0385169061203f565b5f60ff8216601f81111561066c57604051632cd44ac360e21b815260040160405180910390fd5b8051825114611e5f5781518151604051635b05999160e01b8152600481019290925260248201526044016107c5565b335f5b8351811015611f61576020818102858101820151908501909101516001600160a01b03881615611f13575f828152602081815260408083206001600160a01b038c16845290915290205481811015611eed576040516303dee4c560e01b81526001600160a01b038a1660048201526024810182905260448101839052606481018490526084016107c5565b5f838152602081815260408083206001600160a01b038d16845290915290209082900390555b6001600160a01b03871615611f57575f828152602081815260408083206001600160a01b038b16845290915281208054839290611f519084906128c7565b90915550505b5050600101611e62565b508251600103611fe15760208301515f906020840151909150856001600160a01b0316876001600160a01b0316846001600160a01b03167fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f628585604051611fd2929190918252602082015260400190565b60405180910390a45050610b75565b836001600160a01b0316856001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb86866040516120309291906128da565b60405180910390a45050505050565b804710156120625760405163cd78605960e01b81523060048201526024016107c5565b5f826001600160a01b0316826040515f6040518083038185875af1925050503d805f81146120ab576040519150601f19603f3d011682016040523d82523d5f602084013e6120b0565b606091505b5050905080610bdb57604051630a12f52160e11b815260040160405180910390fd5b80356001600160a01b03811681146120e8575f80fd5b919050565b5f80604083850312156120fe575f80fd5b612107836120d2565b946020939093013593505050565b6001600160e01b031981168114610e81575f80fd5b5f6020828403121561213a575f80fd5b8135611b5381612115565b5f60208284031215612155575f80fd5b5035919050565b5f81518084525f5b8181101561218057602081850181015186830182015201612164565b505f602082860101526020601f19601f83011685010191505092915050565b602081525f611b53602083018461215c565b634e487b7160e01b5f52604160045260245ffd5b604051601f8201601f1916810167ffffffffffffffff811182821017156121ee576121ee6121b1565b604052919050565b5f67ffffffffffffffff82111561220f5761220f6121b1565b5060051b60200190565b5f82601f830112612228575f80fd5b8135602061223d612238836121f6565b6121c5565b8083825260208201915060208460051b87010193508684111561225e575f80fd5b602086015b8481101561227a5780358352918301918301612263565b509695505050505050565b5f82601f830112612294575f80fd5b813567ffffffffffffffff8111156122ae576122ae6121b1565b6122c1601f8201601f19166020016121c5565b8181528460208386010111156122d5575f80fd5b816020850160208301375f918101602001919091529392505050565b5f805f805f60a08688031215612305575f80fd5b61230e866120d2565b945061231c602087016120d2565b9350604086013567ffffffffffffffff80821115612338575f80fd5b61234489838a01612219565b94506060880135915080821115612359575f80fd5b61236589838a01612219565b9350608088013591508082111561237a575f80fd5b5061238788828901612285565b9150509295509295909350565b5f80604083850312156123a5575f80fd5b823567ffffffffffffffff808211156123bc575f80fd5b818501915085601f8301126123cf575f80fd5b813560206123df612238836121f6565b82815260059290921b840181019181810190898411156123fd575f80fd5b948201945b8386101561242257612413866120d2565b82529482019490820190612402565b96505086013592505080821115612437575f80fd5b5061244485828601612219565b9150509250929050565b5f815180845260208085019450602084015f5b8381101561247d57815187529582019590820190600101612461565b509495945050505050565b602081525f611b53602083018461244e565b5f602082840312156124aa575f80fd5b611b53826120d2565b5f805f606084860312156124c5575f80fd5b6124ce846120d2565b9250602084013567ffffffffffffffff808211156124ea575f80fd5b6124f687838801612219565b9350604086013591508082111561250b575f80fd5b5061251886828701612219565b9150509250925092565b60ff60f81b8816815260e060208201525f61254060e083018961215c565b8281036040840152612552818961215c565b606084018890526001600160a01b038716608085015260a0840186905283810360c08501529050612583818561244e565b9a9950505050505050505050565b5f80604083850312156125a2575f80fd5b6125ab836120d2565b9150602083013580151581146125bf575f80fd5b809150509250929050565b5f80604083850312156125db575f80fd5b823591506125eb602084016120d2565b90509250929050565b5f805f805f8060c08789031215612609575f80fd5b612612876120d2565b95506020870135945060408701359350606087013560ff81168114612635575f80fd5b9598949750929560808101359460a0909101359350915050565b5f8060408385031215612660575f80fd5b612669836120d2565b91506125eb602084016120d2565b5f805f805f60a0868803121561268b575f80fd5b612694866120d2565b94506126a2602087016120d2565b93506040860135925060608601359150608086013567ffffffffffffffff8111156126cb575f80fd5b61238788828901612285565b5f805f606084860312156126e9575f80fd5b6126f2846120d2565b95602085013595506040909401359392505050565b600181811c9082168061271b57607f821691505b60208210810361273957634e487b7160e01b5f52602260045260245ffd5b50919050565b634e487b7160e01b5f52601160045260245ffd5b5f8261276d57634e487b7160e01b5f52601260045260245ffd5b500490565b634e487b7160e01b5f52603260045260245ffd5b5f60208284031215612796575f80fd5b5051919050565b8181038181111561066c5761066c61273f565b634e487b7160e01b5f52602160045260245ffd5b6001600160a01b03868116825285166020820152604081018490526060810183905260a0608082018190525f906127fd9083018461215c565b979650505050505050565b5f60208284031215612818575f80fd5b8151611b5381612115565b6001600160a01b0386811682528516602082015260a0604082018190525f9061284e9083018661244e565b8281036060840152612860818661244e565b90508281036080840152612874818561215c565b98975050505050505050565b6001600160d01b038281168282160390808211156128a0576128a061273f565b5092915050565b6001600160d01b038181168382160190808211156128a0576128a061273f565b8082018082111561066c5761066c61273f565b604081525f6128ec604083018561244e565b82810360208401526128fe818561244e565b9594505050505056fea2646970667358221220ac82269d2f6532975c1b095b6055e3104e40f47f3a22e1a8b8acde1726f1ea2f64736f6c63430008180033",
}

// BmErc1155ABI is the input ABI used to generate the binding from.
// Deprecated: Use BmErc1155MetaData.ABI instead.
var BmErc1155ABI = BmErc1155MetaData.ABI

// BmErc1155Bin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use BmErc1155MetaData.Bin instead.
var BmErc1155Bin = BmErc1155MetaData.Bin

// DeployBmErc1155 deploys a new Ethereum contract, binding an instance of BmErc1155 to it.
func DeployBmErc1155(auth *bind.TransactOpts, backend bind.ContractBackend, name string, version string, uri_ string, erc20_ common.Address, governor common.Address) (common.Address, *types.Transaction, *BmErc1155, error) {
	parsed, err := BmErc1155MetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(BmErc1155Bin), backend, name, version, uri_, erc20_, governor)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &BmErc1155{BmErc1155Caller: BmErc1155Caller{contract: contract}, BmErc1155Transactor: BmErc1155Transactor{contract: contract}, BmErc1155Filterer: BmErc1155Filterer{contract: contract}}, nil
}

// BmErc1155 is an auto generated Go binding around an Ethereum contract.
type BmErc1155 struct {
	BmErc1155Caller     // Read-only binding to the contract
	BmErc1155Transactor // Write-only binding to the contract
	BmErc1155Filterer   // Log filterer for contract events
}

// BmErc1155Caller is an auto generated read-only Go binding around an Ethereum contract.
type BmErc1155Caller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BmErc1155Transactor is an auto generated write-only Go binding around an Ethereum contract.
type BmErc1155Transactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BmErc1155Filterer is an auto generated log filtering Go binding around an Ethereum contract events.
type BmErc1155Filterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BmErc1155Session is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type BmErc1155Session struct {
	Contract     *BmErc1155        // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// BmErc1155CallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type BmErc1155CallerSession struct {
	Contract *BmErc1155Caller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts    // Call options to use throughout this session
}

// BmErc1155TransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type BmErc1155TransactorSession struct {
	Contract     *BmErc1155Transactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts    // Transaction auth options to use throughout this session
}

// BmErc1155Raw is an auto generated low-level Go binding around an Ethereum contract.
type BmErc1155Raw struct {
	Contract *BmErc1155 // Generic contract binding to access the raw methods on
}

// BmErc1155CallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type BmErc1155CallerRaw struct {
	Contract *BmErc1155Caller // Generic read-only contract binding to access the raw methods on
}

// BmErc1155TransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type BmErc1155TransactorRaw struct {
	Contract *BmErc1155Transactor // Generic write-only contract binding to access the raw methods on
}

// NewBmErc1155 creates a new instance of BmErc1155, bound to a specific deployed contract.
func NewBmErc1155(address common.Address, backend bind.ContractBackend) (*BmErc1155, error) {
	contract, err := bindBmErc1155(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &BmErc1155{BmErc1155Caller: BmErc1155Caller{contract: contract}, BmErc1155Transactor: BmErc1155Transactor{contract: contract}, BmErc1155Filterer: BmErc1155Filterer{contract: contract}}, nil
}

// NewBmErc1155Caller creates a new read-only instance of BmErc1155, bound to a specific deployed contract.
func NewBmErc1155Caller(address common.Address, caller bind.ContractCaller) (*BmErc1155Caller, error) {
	contract, err := bindBmErc1155(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &BmErc1155Caller{contract: contract}, nil
}

// NewBmErc1155Transactor creates a new write-only instance of BmErc1155, bound to a specific deployed contract.
func NewBmErc1155Transactor(address common.Address, transactor bind.ContractTransactor) (*BmErc1155Transactor, error) {
	contract, err := bindBmErc1155(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &BmErc1155Transactor{contract: contract}, nil
}

// NewBmErc1155Filterer creates a new log filterer instance of BmErc1155, bound to a specific deployed contract.
func NewBmErc1155Filterer(address common.Address, filterer bind.ContractFilterer) (*BmErc1155Filterer, error) {
	contract, err := bindBmErc1155(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &BmErc1155Filterer{contract: contract}, nil
}

// bindBmErc1155 binds a generic wrapper to an already deployed contract.
func bindBmErc1155(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := BmErc1155MetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_BmErc1155 *BmErc1155Raw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _BmErc1155.Contract.BmErc1155Caller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_BmErc1155 *BmErc1155Raw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BmErc1155.Contract.BmErc1155Transactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_BmErc1155 *BmErc1155Raw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _BmErc1155.Contract.BmErc1155Transactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_BmErc1155 *BmErc1155CallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _BmErc1155.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_BmErc1155 *BmErc1155TransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BmErc1155.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_BmErc1155 *BmErc1155TransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _BmErc1155.Contract.contract.Transact(opts, method, params...)
}

// CLOCKMODE is a free data retrieval call binding the contract method 0x4bf5d7e9.
//
// Solidity: function CLOCK_MODE() view returns(string)
func (_BmErc1155 *BmErc1155Caller) CLOCKMODE(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _BmErc1155.contract.Call(opts, &out, "CLOCK_MODE")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// CLOCKMODE is a free data retrieval call binding the contract method 0x4bf5d7e9.
//
// Solidity: function CLOCK_MODE() view returns(string)
func (_BmErc1155 *BmErc1155Session) CLOCKMODE() (string, error) {
	return _BmErc1155.Contract.CLOCKMODE(&_BmErc1155.CallOpts)
}

// CLOCKMODE is a free data retrieval call binding the contract method 0x4bf5d7e9.
//
// Solidity: function CLOCK_MODE() view returns(string)
func (_BmErc1155 *BmErc1155CallerSession) CLOCKMODE() (string, error) {
	return _BmErc1155.Contract.CLOCKMODE(&_BmErc1155.CallOpts)
}

// BalanceOf is a free data retrieval call binding the contract method 0x00fdd58e.
//
// Solidity: function balanceOf(address account, uint256 id) view returns(uint256)
func (_BmErc1155 *BmErc1155Caller) BalanceOf(opts *bind.CallOpts, account common.Address, id *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _BmErc1155.contract.Call(opts, &out, "balanceOf", account, id)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceOf is a free data retrieval call binding the contract method 0x00fdd58e.
//
// Solidity: function balanceOf(address account, uint256 id) view returns(uint256)
func (_BmErc1155 *BmErc1155Session) BalanceOf(account common.Address, id *big.Int) (*big.Int, error) {
	return _BmErc1155.Contract.BalanceOf(&_BmErc1155.CallOpts, account, id)
}

// BalanceOf is a free data retrieval call binding the contract method 0x00fdd58e.
//
// Solidity: function balanceOf(address account, uint256 id) view returns(uint256)
func (_BmErc1155 *BmErc1155CallerSession) BalanceOf(account common.Address, id *big.Int) (*big.Int, error) {
	return _BmErc1155.Contract.BalanceOf(&_BmErc1155.CallOpts, account, id)
}

// BalanceOfBatch is a free data retrieval call binding the contract method 0x4e1273f4.
//
// Solidity: function balanceOfBatch(address[] accounts, uint256[] ids) view returns(uint256[])
func (_BmErc1155 *BmErc1155Caller) BalanceOfBatch(opts *bind.CallOpts, accounts []common.Address, ids []*big.Int) ([]*big.Int, error) {
	var out []interface{}
	err := _BmErc1155.contract.Call(opts, &out, "balanceOfBatch", accounts, ids)

	if err != nil {
		return *new([]*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new([]*big.Int)).(*[]*big.Int)

	return out0, err

}

// BalanceOfBatch is a free data retrieval call binding the contract method 0x4e1273f4.
//
// Solidity: function balanceOfBatch(address[] accounts, uint256[] ids) view returns(uint256[])
func (_BmErc1155 *BmErc1155Session) BalanceOfBatch(accounts []common.Address, ids []*big.Int) ([]*big.Int, error) {
	return _BmErc1155.Contract.BalanceOfBatch(&_BmErc1155.CallOpts, accounts, ids)
}

// BalanceOfBatch is a free data retrieval call binding the contract method 0x4e1273f4.
//
// Solidity: function balanceOfBatch(address[] accounts, uint256[] ids) view returns(uint256[])
func (_BmErc1155 *BmErc1155CallerSession) BalanceOfBatch(accounts []common.Address, ids []*big.Int) ([]*big.Int, error) {
	return _BmErc1155.Contract.BalanceOfBatch(&_BmErc1155.CallOpts, accounts, ids)
}

// Clock is a free data retrieval call binding the contract method 0x91ddadf4.
//
// Solidity: function clock() view returns(uint48)
func (_BmErc1155 *BmErc1155Caller) Clock(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _BmErc1155.contract.Call(opts, &out, "clock")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Clock is a free data retrieval call binding the contract method 0x91ddadf4.
//
// Solidity: function clock() view returns(uint48)
func (_BmErc1155 *BmErc1155Session) Clock() (*big.Int, error) {
	return _BmErc1155.Contract.Clock(&_BmErc1155.CallOpts)
}

// Clock is a free data retrieval call binding the contract method 0x91ddadf4.
//
// Solidity: function clock() view returns(uint48)
func (_BmErc1155 *BmErc1155CallerSession) Clock() (*big.Int, error) {
	return _BmErc1155.Contract.Clock(&_BmErc1155.CallOpts)
}

// CurrentID is a free data retrieval call binding the contract method 0x1c75cfb4.
//
// Solidity: function currentID() view returns(uint256)
func (_BmErc1155 *BmErc1155Caller) CurrentID(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _BmErc1155.contract.Call(opts, &out, "currentID")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// CurrentID is a free data retrieval call binding the contract method 0x1c75cfb4.
//
// Solidity: function currentID() view returns(uint256)
func (_BmErc1155 *BmErc1155Session) CurrentID() (*big.Int, error) {
	return _BmErc1155.Contract.CurrentID(&_BmErc1155.CallOpts)
}

// CurrentID is a free data retrieval call binding the contract method 0x1c75cfb4.
//
// Solidity: function currentID() view returns(uint256)
func (_BmErc1155 *BmErc1155CallerSession) CurrentID() (*big.Int, error) {
	return _BmErc1155.Contract.CurrentID(&_BmErc1155.CallOpts)
}

// Delegates is a free data retrieval call binding the contract method 0x587cde1e.
//
// Solidity: function delegates(address account) view returns(address)
func (_BmErc1155 *BmErc1155Caller) Delegates(opts *bind.CallOpts, account common.Address) (common.Address, error) {
	var out []interface{}
	err := _BmErc1155.contract.Call(opts, &out, "delegates", account)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Delegates is a free data retrieval call binding the contract method 0x587cde1e.
//
// Solidity: function delegates(address account) view returns(address)
func (_BmErc1155 *BmErc1155Session) Delegates(account common.Address) (common.Address, error) {
	return _BmErc1155.Contract.Delegates(&_BmErc1155.CallOpts, account)
}

// Delegates is a free data retrieval call binding the contract method 0x587cde1e.
//
// Solidity: function delegates(address account) view returns(address)
func (_BmErc1155 *BmErc1155CallerSession) Delegates(account common.Address) (common.Address, error) {
	return _BmErc1155.Contract.Delegates(&_BmErc1155.CallOpts, account)
}

// Delegates0 is a free data retrieval call binding the contract method 0xc47e0252.
//
// Solidity: function delegates(uint256 id, address account) view returns(address)
func (_BmErc1155 *BmErc1155Caller) Delegates0(opts *bind.CallOpts, id *big.Int, account common.Address) (common.Address, error) {
	var out []interface{}
	err := _BmErc1155.contract.Call(opts, &out, "delegates0", id, account)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Delegates0 is a free data retrieval call binding the contract method 0xc47e0252.
//
// Solidity: function delegates(uint256 id, address account) view returns(address)
func (_BmErc1155 *BmErc1155Session) Delegates0(id *big.Int, account common.Address) (common.Address, error) {
	return _BmErc1155.Contract.Delegates0(&_BmErc1155.CallOpts, id, account)
}

// Delegates0 is a free data retrieval call binding the contract method 0xc47e0252.
//
// Solidity: function delegates(uint256 id, address account) view returns(address)
func (_BmErc1155 *BmErc1155CallerSession) Delegates0(id *big.Int, account common.Address) (common.Address, error) {
	return _BmErc1155.Contract.Delegates0(&_BmErc1155.CallOpts, id, account)
}

// Eip712Domain is a free data retrieval call binding the contract method 0x84b0196e.
//
// Solidity: function eip712Domain() view returns(bytes1 fields, string name, string version, uint256 chainId, address verifyingContract, bytes32 salt, uint256[] extensions)
func (_BmErc1155 *BmErc1155Caller) Eip712Domain(opts *bind.CallOpts) (struct {
	Fields            [1]byte
	Name              string
	Version           string
	ChainId           *big.Int
	VerifyingContract common.Address
	Salt              [32]byte
	Extensions        []*big.Int
}, error) {
	var out []interface{}
	err := _BmErc1155.contract.Call(opts, &out, "eip712Domain")

	outstruct := new(struct {
		Fields            [1]byte
		Name              string
		Version           string
		ChainId           *big.Int
		VerifyingContract common.Address
		Salt              [32]byte
		Extensions        []*big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Fields = *abi.ConvertType(out[0], new([1]byte)).(*[1]byte)
	outstruct.Name = *abi.ConvertType(out[1], new(string)).(*string)
	outstruct.Version = *abi.ConvertType(out[2], new(string)).(*string)
	outstruct.ChainId = *abi.ConvertType(out[3], new(*big.Int)).(**big.Int)
	outstruct.VerifyingContract = *abi.ConvertType(out[4], new(common.Address)).(*common.Address)
	outstruct.Salt = *abi.ConvertType(out[5], new([32]byte)).(*[32]byte)
	outstruct.Extensions = *abi.ConvertType(out[6], new([]*big.Int)).(*[]*big.Int)

	return *outstruct, err

}

// Eip712Domain is a free data retrieval call binding the contract method 0x84b0196e.
//
// Solidity: function eip712Domain() view returns(bytes1 fields, string name, string version, uint256 chainId, address verifyingContract, bytes32 salt, uint256[] extensions)
func (_BmErc1155 *BmErc1155Session) Eip712Domain() (struct {
	Fields            [1]byte
	Name              string
	Version           string
	ChainId           *big.Int
	VerifyingContract common.Address
	Salt              [32]byte
	Extensions        []*big.Int
}, error) {
	return _BmErc1155.Contract.Eip712Domain(&_BmErc1155.CallOpts)
}

// Eip712Domain is a free data retrieval call binding the contract method 0x84b0196e.
//
// Solidity: function eip712Domain() view returns(bytes1 fields, string name, string version, uint256 chainId, address verifyingContract, bytes32 salt, uint256[] extensions)
func (_BmErc1155 *BmErc1155CallerSession) Eip712Domain() (struct {
	Fields            [1]byte
	Name              string
	Version           string
	ChainId           *big.Int
	VerifyingContract common.Address
	Salt              [32]byte
	Extensions        []*big.Int
}, error) {
	return _BmErc1155.Contract.Eip712Domain(&_BmErc1155.CallOpts)
}

// Exists is a free data retrieval call binding the contract method 0x4f558e79.
//
// Solidity: function exists(uint256 id) view returns(bool)
func (_BmErc1155 *BmErc1155Caller) Exists(opts *bind.CallOpts, id *big.Int) (bool, error) {
	var out []interface{}
	err := _BmErc1155.contract.Call(opts, &out, "exists", id)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// Exists is a free data retrieval call binding the contract method 0x4f558e79.
//
// Solidity: function exists(uint256 id) view returns(bool)
func (_BmErc1155 *BmErc1155Session) Exists(id *big.Int) (bool, error) {
	return _BmErc1155.Contract.Exists(&_BmErc1155.CallOpts, id)
}

// Exists is a free data retrieval call binding the contract method 0x4f558e79.
//
// Solidity: function exists(uint256 id) view returns(bool)
func (_BmErc1155 *BmErc1155CallerSession) Exists(id *big.Int) (bool, error) {
	return _BmErc1155.Contract.Exists(&_BmErc1155.CallOpts, id)
}

// GetPastTotalSupply is a free data retrieval call binding the contract method 0x8e539e8c.
//
// Solidity: function getPastTotalSupply(uint256 timepoint) view returns(uint256)
func (_BmErc1155 *BmErc1155Caller) GetPastTotalSupply(opts *bind.CallOpts, timepoint *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _BmErc1155.contract.Call(opts, &out, "getPastTotalSupply", timepoint)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetPastTotalSupply is a free data retrieval call binding the contract method 0x8e539e8c.
//
// Solidity: function getPastTotalSupply(uint256 timepoint) view returns(uint256)
func (_BmErc1155 *BmErc1155Session) GetPastTotalSupply(timepoint *big.Int) (*big.Int, error) {
	return _BmErc1155.Contract.GetPastTotalSupply(&_BmErc1155.CallOpts, timepoint)
}

// GetPastTotalSupply is a free data retrieval call binding the contract method 0x8e539e8c.
//
// Solidity: function getPastTotalSupply(uint256 timepoint) view returns(uint256)
func (_BmErc1155 *BmErc1155CallerSession) GetPastTotalSupply(timepoint *big.Int) (*big.Int, error) {
	return _BmErc1155.Contract.GetPastTotalSupply(&_BmErc1155.CallOpts, timepoint)
}

// GetPastVotes is a free data retrieval call binding the contract method 0x3a46b1a8.
//
// Solidity: function getPastVotes(address account, uint256 timepoint) view returns(uint256)
func (_BmErc1155 *BmErc1155Caller) GetPastVotes(opts *bind.CallOpts, account common.Address, timepoint *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _BmErc1155.contract.Call(opts, &out, "getPastVotes", account, timepoint)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetPastVotes is a free data retrieval call binding the contract method 0x3a46b1a8.
//
// Solidity: function getPastVotes(address account, uint256 timepoint) view returns(uint256)
func (_BmErc1155 *BmErc1155Session) GetPastVotes(account common.Address, timepoint *big.Int) (*big.Int, error) {
	return _BmErc1155.Contract.GetPastVotes(&_BmErc1155.CallOpts, account, timepoint)
}

// GetPastVotes is a free data retrieval call binding the contract method 0x3a46b1a8.
//
// Solidity: function getPastVotes(address account, uint256 timepoint) view returns(uint256)
func (_BmErc1155 *BmErc1155CallerSession) GetPastVotes(account common.Address, timepoint *big.Int) (*big.Int, error) {
	return _BmErc1155.Contract.GetPastVotes(&_BmErc1155.CallOpts, account, timepoint)
}

// GetVotes is a free data retrieval call binding the contract method 0x9ab24eb0.
//
// Solidity: function getVotes(address account) view returns(uint256)
func (_BmErc1155 *BmErc1155Caller) GetVotes(opts *bind.CallOpts, account common.Address) (*big.Int, error) {
	var out []interface{}
	err := _BmErc1155.contract.Call(opts, &out, "getVotes", account)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetVotes is a free data retrieval call binding the contract method 0x9ab24eb0.
//
// Solidity: function getVotes(address account) view returns(uint256)
func (_BmErc1155 *BmErc1155Session) GetVotes(account common.Address) (*big.Int, error) {
	return _BmErc1155.Contract.GetVotes(&_BmErc1155.CallOpts, account)
}

// GetVotes is a free data retrieval call binding the contract method 0x9ab24eb0.
//
// Solidity: function getVotes(address account) view returns(uint256)
func (_BmErc1155 *BmErc1155CallerSession) GetVotes(account common.Address) (*big.Int, error) {
	return _BmErc1155.Contract.GetVotes(&_BmErc1155.CallOpts, account)
}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address account, address operator) view returns(bool)
func (_BmErc1155 *BmErc1155Caller) IsApprovedForAll(opts *bind.CallOpts, account common.Address, operator common.Address) (bool, error) {
	var out []interface{}
	err := _BmErc1155.contract.Call(opts, &out, "isApprovedForAll", account, operator)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address account, address operator) view returns(bool)
func (_BmErc1155 *BmErc1155Session) IsApprovedForAll(account common.Address, operator common.Address) (bool, error) {
	return _BmErc1155.Contract.IsApprovedForAll(&_BmErc1155.CallOpts, account, operator)
}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address account, address operator) view returns(bool)
func (_BmErc1155 *BmErc1155CallerSession) IsApprovedForAll(account common.Address, operator common.Address) (bool, error) {
	return _BmErc1155.Contract.IsApprovedForAll(&_BmErc1155.CallOpts, account, operator)
}

// MintedAmount is a free data retrieval call binding the contract method 0xbfb30e46.
//
// Solidity: function mintedAmount(uint256 id, address account) view returns(uint256)
func (_BmErc1155 *BmErc1155Caller) MintedAmount(opts *bind.CallOpts, id *big.Int, account common.Address) (*big.Int, error) {
	var out []interface{}
	err := _BmErc1155.contract.Call(opts, &out, "mintedAmount", id, account)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// MintedAmount is a free data retrieval call binding the contract method 0xbfb30e46.
//
// Solidity: function mintedAmount(uint256 id, address account) view returns(uint256)
func (_BmErc1155 *BmErc1155Session) MintedAmount(id *big.Int, account common.Address) (*big.Int, error) {
	return _BmErc1155.Contract.MintedAmount(&_BmErc1155.CallOpts, id, account)
}

// MintedAmount is a free data retrieval call binding the contract method 0xbfb30e46.
//
// Solidity: function mintedAmount(uint256 id, address account) view returns(uint256)
func (_BmErc1155 *BmErc1155CallerSession) MintedAmount(id *big.Int, account common.Address) (*big.Int, error) {
	return _BmErc1155.Contract.MintedAmount(&_BmErc1155.CallOpts, id, account)
}

// Nonces is a free data retrieval call binding the contract method 0x7ecebe00.
//
// Solidity: function nonces(address owner) view returns(uint256)
func (_BmErc1155 *BmErc1155Caller) Nonces(opts *bind.CallOpts, owner common.Address) (*big.Int, error) {
	var out []interface{}
	err := _BmErc1155.contract.Call(opts, &out, "nonces", owner)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Nonces is a free data retrieval call binding the contract method 0x7ecebe00.
//
// Solidity: function nonces(address owner) view returns(uint256)
func (_BmErc1155 *BmErc1155Session) Nonces(owner common.Address) (*big.Int, error) {
	return _BmErc1155.Contract.Nonces(&_BmErc1155.CallOpts, owner)
}

// Nonces is a free data retrieval call binding the contract method 0x7ecebe00.
//
// Solidity: function nonces(address owner) view returns(uint256)
func (_BmErc1155 *BmErc1155CallerSession) Nonces(owner common.Address) (*big.Int, error) {
	return _BmErc1155.Contract.Nonces(&_BmErc1155.CallOpts, owner)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_BmErc1155 *BmErc1155Caller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _BmErc1155.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_BmErc1155 *BmErc1155Session) Owner() (common.Address, error) {
	return _BmErc1155.Contract.Owner(&_BmErc1155.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_BmErc1155 *BmErc1155CallerSession) Owner() (common.Address, error) {
	return _BmErc1155.Contract.Owner(&_BmErc1155.CallOpts)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_BmErc1155 *BmErc1155Caller) SupportsInterface(opts *bind.CallOpts, interfaceId [4]byte) (bool, error) {
	var out []interface{}
	err := _BmErc1155.contract.Call(opts, &out, "supportsInterface", interfaceId)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_BmErc1155 *BmErc1155Session) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _BmErc1155.Contract.SupportsInterface(&_BmErc1155.CallOpts, interfaceId)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_BmErc1155 *BmErc1155CallerSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _BmErc1155.Contract.SupportsInterface(&_BmErc1155.CallOpts, interfaceId)
}

// TimepointID is a free data retrieval call binding the contract method 0x7642b04f.
//
// Solidity: function timepointID(uint256 timepoint) pure returns(uint256)
func (_BmErc1155 *BmErc1155Caller) TimepointID(opts *bind.CallOpts, timepoint *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _BmErc1155.contract.Call(opts, &out, "timepointID", timepoint)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TimepointID is a free data retrieval call binding the contract method 0x7642b04f.
//
// Solidity: function timepointID(uint256 timepoint) pure returns(uint256)
func (_BmErc1155 *BmErc1155Session) TimepointID(timepoint *big.Int) (*big.Int, error) {
	return _BmErc1155.Contract.TimepointID(&_BmErc1155.CallOpts, timepoint)
}

// TimepointID is a free data retrieval call binding the contract method 0x7642b04f.
//
// Solidity: function timepointID(uint256 timepoint) pure returns(uint256)
func (_BmErc1155 *BmErc1155CallerSession) TimepointID(timepoint *big.Int) (*big.Int, error) {
	return _BmErc1155.Contract.TimepointID(&_BmErc1155.CallOpts, timepoint)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_BmErc1155 *BmErc1155Caller) TotalSupply(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _BmErc1155.contract.Call(opts, &out, "totalSupply")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_BmErc1155 *BmErc1155Session) TotalSupply() (*big.Int, error) {
	return _BmErc1155.Contract.TotalSupply(&_BmErc1155.CallOpts)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_BmErc1155 *BmErc1155CallerSession) TotalSupply() (*big.Int, error) {
	return _BmErc1155.Contract.TotalSupply(&_BmErc1155.CallOpts)
}

// TotalSupply0 is a free data retrieval call binding the contract method 0xbd85b039.
//
// Solidity: function totalSupply(uint256 id) view returns(uint256)
func (_BmErc1155 *BmErc1155Caller) TotalSupply0(opts *bind.CallOpts, id *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _BmErc1155.contract.Call(opts, &out, "totalSupply0", id)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TotalSupply0 is a free data retrieval call binding the contract method 0xbd85b039.
//
// Solidity: function totalSupply(uint256 id) view returns(uint256)
func (_BmErc1155 *BmErc1155Session) TotalSupply0(id *big.Int) (*big.Int, error) {
	return _BmErc1155.Contract.TotalSupply0(&_BmErc1155.CallOpts, id)
}

// TotalSupply0 is a free data retrieval call binding the contract method 0xbd85b039.
//
// Solidity: function totalSupply(uint256 id) view returns(uint256)
func (_BmErc1155 *BmErc1155CallerSession) TotalSupply0(id *big.Int) (*big.Int, error) {
	return _BmErc1155.Contract.TotalSupply0(&_BmErc1155.CallOpts, id)
}

// Uri is a free data retrieval call binding the contract method 0x0e89341c.
//
// Solidity: function uri(uint256 ) view returns(string)
func (_BmErc1155 *BmErc1155Caller) Uri(opts *bind.CallOpts, arg0 *big.Int) (string, error) {
	var out []interface{}
	err := _BmErc1155.contract.Call(opts, &out, "uri", arg0)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Uri is a free data retrieval call binding the contract method 0x0e89341c.
//
// Solidity: function uri(uint256 ) view returns(string)
func (_BmErc1155 *BmErc1155Session) Uri(arg0 *big.Int) (string, error) {
	return _BmErc1155.Contract.Uri(&_BmErc1155.CallOpts, arg0)
}

// Uri is a free data retrieval call binding the contract method 0x0e89341c.
//
// Solidity: function uri(uint256 ) view returns(string)
func (_BmErc1155 *BmErc1155CallerSession) Uri(arg0 *big.Int) (string, error) {
	return _BmErc1155.Contract.Uri(&_BmErc1155.CallOpts, arg0)
}

// Burn is a paid mutator transaction binding the contract method 0xf5298aca.
//
// Solidity: function burn(address account, uint256 id, uint256 value) returns()
func (_BmErc1155 *BmErc1155Transactor) Burn(opts *bind.TransactOpts, account common.Address, id *big.Int, value *big.Int) (*types.Transaction, error) {
	return _BmErc1155.contract.Transact(opts, "burn", account, id, value)
}

// Burn is a paid mutator transaction binding the contract method 0xf5298aca.
//
// Solidity: function burn(address account, uint256 id, uint256 value) returns()
func (_BmErc1155 *BmErc1155Session) Burn(account common.Address, id *big.Int, value *big.Int) (*types.Transaction, error) {
	return _BmErc1155.Contract.Burn(&_BmErc1155.TransactOpts, account, id, value)
}

// Burn is a paid mutator transaction binding the contract method 0xf5298aca.
//
// Solidity: function burn(address account, uint256 id, uint256 value) returns()
func (_BmErc1155 *BmErc1155TransactorSession) Burn(account common.Address, id *big.Int, value *big.Int) (*types.Transaction, error) {
	return _BmErc1155.Contract.Burn(&_BmErc1155.TransactOpts, account, id, value)
}

// BurnBatch is a paid mutator transaction binding the contract method 0x6b20c454.
//
// Solidity: function burnBatch(address account, uint256[] ids, uint256[] values) returns()
func (_BmErc1155 *BmErc1155Transactor) BurnBatch(opts *bind.TransactOpts, account common.Address, ids []*big.Int, values []*big.Int) (*types.Transaction, error) {
	return _BmErc1155.contract.Transact(opts, "burnBatch", account, ids, values)
}

// BurnBatch is a paid mutator transaction binding the contract method 0x6b20c454.
//
// Solidity: function burnBatch(address account, uint256[] ids, uint256[] values) returns()
func (_BmErc1155 *BmErc1155Session) BurnBatch(account common.Address, ids []*big.Int, values []*big.Int) (*types.Transaction, error) {
	return _BmErc1155.Contract.BurnBatch(&_BmErc1155.TransactOpts, account, ids, values)
}

// BurnBatch is a paid mutator transaction binding the contract method 0x6b20c454.
//
// Solidity: function burnBatch(address account, uint256[] ids, uint256[] values) returns()
func (_BmErc1155 *BmErc1155TransactorSession) BurnBatch(account common.Address, ids []*big.Int, values []*big.Int) (*types.Transaction, error) {
	return _BmErc1155.Contract.BurnBatch(&_BmErc1155.TransactOpts, account, ids, values)
}

// Delegate is a paid mutator transaction binding the contract method 0x5c19a95c.
//
// Solidity: function delegate(address delegatee) returns()
func (_BmErc1155 *BmErc1155Transactor) Delegate(opts *bind.TransactOpts, delegatee common.Address) (*types.Transaction, error) {
	return _BmErc1155.contract.Transact(opts, "delegate", delegatee)
}

// Delegate is a paid mutator transaction binding the contract method 0x5c19a95c.
//
// Solidity: function delegate(address delegatee) returns()
func (_BmErc1155 *BmErc1155Session) Delegate(delegatee common.Address) (*types.Transaction, error) {
	return _BmErc1155.Contract.Delegate(&_BmErc1155.TransactOpts, delegatee)
}

// Delegate is a paid mutator transaction binding the contract method 0x5c19a95c.
//
// Solidity: function delegate(address delegatee) returns()
func (_BmErc1155 *BmErc1155TransactorSession) Delegate(delegatee common.Address) (*types.Transaction, error) {
	return _BmErc1155.Contract.Delegate(&_BmErc1155.TransactOpts, delegatee)
}

// DelegateByOwner is a paid mutator transaction binding the contract method 0x6044ae90.
//
// Solidity: function delegateByOwner(address account) returns()
func (_BmErc1155 *BmErc1155Transactor) DelegateByOwner(opts *bind.TransactOpts, account common.Address) (*types.Transaction, error) {
	return _BmErc1155.contract.Transact(opts, "delegateByOwner", account)
}

// DelegateByOwner is a paid mutator transaction binding the contract method 0x6044ae90.
//
// Solidity: function delegateByOwner(address account) returns()
func (_BmErc1155 *BmErc1155Session) DelegateByOwner(account common.Address) (*types.Transaction, error) {
	return _BmErc1155.Contract.DelegateByOwner(&_BmErc1155.TransactOpts, account)
}

// DelegateByOwner is a paid mutator transaction binding the contract method 0x6044ae90.
//
// Solidity: function delegateByOwner(address account) returns()
func (_BmErc1155 *BmErc1155TransactorSession) DelegateByOwner(account common.Address) (*types.Transaction, error) {
	return _BmErc1155.Contract.DelegateByOwner(&_BmErc1155.TransactOpts, account)
}

// DelegateBySig is a paid mutator transaction binding the contract method 0xc3cda520.
//
// Solidity: function delegateBySig(address delegatee, uint256 nonce, uint256 expiry, uint8 v, bytes32 r, bytes32 s) returns()
func (_BmErc1155 *BmErc1155Transactor) DelegateBySig(opts *bind.TransactOpts, delegatee common.Address, nonce *big.Int, expiry *big.Int, v uint8, r [32]byte, s [32]byte) (*types.Transaction, error) {
	return _BmErc1155.contract.Transact(opts, "delegateBySig", delegatee, nonce, expiry, v, r, s)
}

// DelegateBySig is a paid mutator transaction binding the contract method 0xc3cda520.
//
// Solidity: function delegateBySig(address delegatee, uint256 nonce, uint256 expiry, uint8 v, bytes32 r, bytes32 s) returns()
func (_BmErc1155 *BmErc1155Session) DelegateBySig(delegatee common.Address, nonce *big.Int, expiry *big.Int, v uint8, r [32]byte, s [32]byte) (*types.Transaction, error) {
	return _BmErc1155.Contract.DelegateBySig(&_BmErc1155.TransactOpts, delegatee, nonce, expiry, v, r, s)
}

// DelegateBySig is a paid mutator transaction binding the contract method 0xc3cda520.
//
// Solidity: function delegateBySig(address delegatee, uint256 nonce, uint256 expiry, uint8 v, bytes32 r, bytes32 s) returns()
func (_BmErc1155 *BmErc1155TransactorSession) DelegateBySig(delegatee common.Address, nonce *big.Int, expiry *big.Int, v uint8, r [32]byte, s [32]byte) (*types.Transaction, error) {
	return _BmErc1155.Contract.DelegateBySig(&_BmErc1155.TransactOpts, delegatee, nonce, expiry, v, r, s)
}

// Mint is a paid mutator transaction binding the contract method 0x6a627842.
//
// Solidity: function mint(address account) returns()
func (_BmErc1155 *BmErc1155Transactor) Mint(opts *bind.TransactOpts, account common.Address) (*types.Transaction, error) {
	return _BmErc1155.contract.Transact(opts, "mint", account)
}

// Mint is a paid mutator transaction binding the contract method 0x6a627842.
//
// Solidity: function mint(address account) returns()
func (_BmErc1155 *BmErc1155Session) Mint(account common.Address) (*types.Transaction, error) {
	return _BmErc1155.Contract.Mint(&_BmErc1155.TransactOpts, account)
}

// Mint is a paid mutator transaction binding the contract method 0x6a627842.
//
// Solidity: function mint(address account) returns()
func (_BmErc1155 *BmErc1155TransactorSession) Mint(account common.Address) (*types.Transaction, error) {
	return _BmErc1155.Contract.Mint(&_BmErc1155.TransactOpts, account)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_BmErc1155 *BmErc1155Transactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BmErc1155.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_BmErc1155 *BmErc1155Session) RenounceOwnership() (*types.Transaction, error) {
	return _BmErc1155.Contract.RenounceOwnership(&_BmErc1155.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_BmErc1155 *BmErc1155TransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _BmErc1155.Contract.RenounceOwnership(&_BmErc1155.TransactOpts)
}

// SafeBatchTransferFrom is a paid mutator transaction binding the contract method 0x2eb2c2d6.
//
// Solidity: function safeBatchTransferFrom(address from, address to, uint256[] ids, uint256[] values, bytes data) returns()
func (_BmErc1155 *BmErc1155Transactor) SafeBatchTransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, ids []*big.Int, values []*big.Int, data []byte) (*types.Transaction, error) {
	return _BmErc1155.contract.Transact(opts, "safeBatchTransferFrom", from, to, ids, values, data)
}

// SafeBatchTransferFrom is a paid mutator transaction binding the contract method 0x2eb2c2d6.
//
// Solidity: function safeBatchTransferFrom(address from, address to, uint256[] ids, uint256[] values, bytes data) returns()
func (_BmErc1155 *BmErc1155Session) SafeBatchTransferFrom(from common.Address, to common.Address, ids []*big.Int, values []*big.Int, data []byte) (*types.Transaction, error) {
	return _BmErc1155.Contract.SafeBatchTransferFrom(&_BmErc1155.TransactOpts, from, to, ids, values, data)
}

// SafeBatchTransferFrom is a paid mutator transaction binding the contract method 0x2eb2c2d6.
//
// Solidity: function safeBatchTransferFrom(address from, address to, uint256[] ids, uint256[] values, bytes data) returns()
func (_BmErc1155 *BmErc1155TransactorSession) SafeBatchTransferFrom(from common.Address, to common.Address, ids []*big.Int, values []*big.Int, data []byte) (*types.Transaction, error) {
	return _BmErc1155.Contract.SafeBatchTransferFrom(&_BmErc1155.TransactOpts, from, to, ids, values, data)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0xf242432a.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 id, uint256 value, bytes data) returns()
func (_BmErc1155 *BmErc1155Transactor) SafeTransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, id *big.Int, value *big.Int, data []byte) (*types.Transaction, error) {
	return _BmErc1155.contract.Transact(opts, "safeTransferFrom", from, to, id, value, data)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0xf242432a.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 id, uint256 value, bytes data) returns()
func (_BmErc1155 *BmErc1155Session) SafeTransferFrom(from common.Address, to common.Address, id *big.Int, value *big.Int, data []byte) (*types.Transaction, error) {
	return _BmErc1155.Contract.SafeTransferFrom(&_BmErc1155.TransactOpts, from, to, id, value, data)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0xf242432a.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 id, uint256 value, bytes data) returns()
func (_BmErc1155 *BmErc1155TransactorSession) SafeTransferFrom(from common.Address, to common.Address, id *big.Int, value *big.Int, data []byte) (*types.Transaction, error) {
	return _BmErc1155.Contract.SafeTransferFrom(&_BmErc1155.TransactOpts, from, to, id, value, data)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_BmErc1155 *BmErc1155Transactor) SetApprovalForAll(opts *bind.TransactOpts, operator common.Address, approved bool) (*types.Transaction, error) {
	return _BmErc1155.contract.Transact(opts, "setApprovalForAll", operator, approved)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_BmErc1155 *BmErc1155Session) SetApprovalForAll(operator common.Address, approved bool) (*types.Transaction, error) {
	return _BmErc1155.Contract.SetApprovalForAll(&_BmErc1155.TransactOpts, operator, approved)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_BmErc1155 *BmErc1155TransactorSession) SetApprovalForAll(operator common.Address, approved bool) (*types.Transaction, error) {
	return _BmErc1155.Contract.SetApprovalForAll(&_BmErc1155.TransactOpts, operator, approved)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_BmErc1155 *BmErc1155Transactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _BmErc1155.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_BmErc1155 *BmErc1155Session) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _BmErc1155.Contract.TransferOwnership(&_BmErc1155.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_BmErc1155 *BmErc1155TransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _BmErc1155.Contract.TransferOwnership(&_BmErc1155.TransactOpts, newOwner)
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_BmErc1155 *BmErc1155Transactor) Receive(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BmErc1155.contract.RawTransact(opts, nil) // calldata is disallowed for receive function
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_BmErc1155 *BmErc1155Session) Receive() (*types.Transaction, error) {
	return _BmErc1155.Contract.Receive(&_BmErc1155.TransactOpts)
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_BmErc1155 *BmErc1155TransactorSession) Receive() (*types.Transaction, error) {
	return _BmErc1155.Contract.Receive(&_BmErc1155.TransactOpts)
}

// BmErc1155ApprovalForAllIterator is returned from FilterApprovalForAll and is used to iterate over the raw logs and unpacked data for ApprovalForAll events raised by the BmErc1155 contract.
type BmErc1155ApprovalForAllIterator struct {
	Event *BmErc1155ApprovalForAll // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BmErc1155ApprovalForAllIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BmErc1155ApprovalForAll)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BmErc1155ApprovalForAll)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BmErc1155ApprovalForAllIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BmErc1155ApprovalForAllIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BmErc1155ApprovalForAll represents a ApprovalForAll event raised by the BmErc1155 contract.
type BmErc1155ApprovalForAll struct {
	Account  common.Address
	Operator common.Address
	Approved bool
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterApprovalForAll is a free log retrieval operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed account, address indexed operator, bool approved)
func (_BmErc1155 *BmErc1155Filterer) FilterApprovalForAll(opts *bind.FilterOpts, account []common.Address, operator []common.Address) (*BmErc1155ApprovalForAllIterator, error) {

	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _BmErc1155.contract.FilterLogs(opts, "ApprovalForAll", accountRule, operatorRule)
	if err != nil {
		return nil, err
	}
	return &BmErc1155ApprovalForAllIterator{contract: _BmErc1155.contract, event: "ApprovalForAll", logs: logs, sub: sub}, nil
}

// WatchApprovalForAll is a free log subscription operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed account, address indexed operator, bool approved)
func (_BmErc1155 *BmErc1155Filterer) WatchApprovalForAll(opts *bind.WatchOpts, sink chan<- *BmErc1155ApprovalForAll, account []common.Address, operator []common.Address) (event.Subscription, error) {

	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _BmErc1155.contract.WatchLogs(opts, "ApprovalForAll", accountRule, operatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BmErc1155ApprovalForAll)
				if err := _BmErc1155.contract.UnpackLog(event, "ApprovalForAll", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApprovalForAll is a log parse operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed account, address indexed operator, bool approved)
func (_BmErc1155 *BmErc1155Filterer) ParseApprovalForAll(log types.Log) (*BmErc1155ApprovalForAll, error) {
	event := new(BmErc1155ApprovalForAll)
	if err := _BmErc1155.contract.UnpackLog(event, "ApprovalForAll", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BmErc1155DelegateChangedIterator is returned from FilterDelegateChanged and is used to iterate over the raw logs and unpacked data for DelegateChanged events raised by the BmErc1155 contract.
type BmErc1155DelegateChangedIterator struct {
	Event *BmErc1155DelegateChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BmErc1155DelegateChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BmErc1155DelegateChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BmErc1155DelegateChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BmErc1155DelegateChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BmErc1155DelegateChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BmErc1155DelegateChanged represents a DelegateChanged event raised by the BmErc1155 contract.
type BmErc1155DelegateChanged struct {
	Delegator    common.Address
	FromDelegate common.Address
	ToDelegate   common.Address
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterDelegateChanged is a free log retrieval operation binding the contract event 0x3134e8a2e6d97e929a7e54011ea5485d7d196dd5f0ba4d4ef95803e8e3fc257f.
//
// Solidity: event DelegateChanged(address indexed delegator, address indexed fromDelegate, address indexed toDelegate)
func (_BmErc1155 *BmErc1155Filterer) FilterDelegateChanged(opts *bind.FilterOpts, delegator []common.Address, fromDelegate []common.Address, toDelegate []common.Address) (*BmErc1155DelegateChangedIterator, error) {

	var delegatorRule []interface{}
	for _, delegatorItem := range delegator {
		delegatorRule = append(delegatorRule, delegatorItem)
	}
	var fromDelegateRule []interface{}
	for _, fromDelegateItem := range fromDelegate {
		fromDelegateRule = append(fromDelegateRule, fromDelegateItem)
	}
	var toDelegateRule []interface{}
	for _, toDelegateItem := range toDelegate {
		toDelegateRule = append(toDelegateRule, toDelegateItem)
	}

	logs, sub, err := _BmErc1155.contract.FilterLogs(opts, "DelegateChanged", delegatorRule, fromDelegateRule, toDelegateRule)
	if err != nil {
		return nil, err
	}
	return &BmErc1155DelegateChangedIterator{contract: _BmErc1155.contract, event: "DelegateChanged", logs: logs, sub: sub}, nil
}

// WatchDelegateChanged is a free log subscription operation binding the contract event 0x3134e8a2e6d97e929a7e54011ea5485d7d196dd5f0ba4d4ef95803e8e3fc257f.
//
// Solidity: event DelegateChanged(address indexed delegator, address indexed fromDelegate, address indexed toDelegate)
func (_BmErc1155 *BmErc1155Filterer) WatchDelegateChanged(opts *bind.WatchOpts, sink chan<- *BmErc1155DelegateChanged, delegator []common.Address, fromDelegate []common.Address, toDelegate []common.Address) (event.Subscription, error) {

	var delegatorRule []interface{}
	for _, delegatorItem := range delegator {
		delegatorRule = append(delegatorRule, delegatorItem)
	}
	var fromDelegateRule []interface{}
	for _, fromDelegateItem := range fromDelegate {
		fromDelegateRule = append(fromDelegateRule, fromDelegateItem)
	}
	var toDelegateRule []interface{}
	for _, toDelegateItem := range toDelegate {
		toDelegateRule = append(toDelegateRule, toDelegateItem)
	}

	logs, sub, err := _BmErc1155.contract.WatchLogs(opts, "DelegateChanged", delegatorRule, fromDelegateRule, toDelegateRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BmErc1155DelegateChanged)
				if err := _BmErc1155.contract.UnpackLog(event, "DelegateChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseDelegateChanged is a log parse operation binding the contract event 0x3134e8a2e6d97e929a7e54011ea5485d7d196dd5f0ba4d4ef95803e8e3fc257f.
//
// Solidity: event DelegateChanged(address indexed delegator, address indexed fromDelegate, address indexed toDelegate)
func (_BmErc1155 *BmErc1155Filterer) ParseDelegateChanged(log types.Log) (*BmErc1155DelegateChanged, error) {
	event := new(BmErc1155DelegateChanged)
	if err := _BmErc1155.contract.UnpackLog(event, "DelegateChanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BmErc1155DelegateVotesChangedIterator is returned from FilterDelegateVotesChanged and is used to iterate over the raw logs and unpacked data for DelegateVotesChanged events raised by the BmErc1155 contract.
type BmErc1155DelegateVotesChangedIterator struct {
	Event *BmErc1155DelegateVotesChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BmErc1155DelegateVotesChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BmErc1155DelegateVotesChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BmErc1155DelegateVotesChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BmErc1155DelegateVotesChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BmErc1155DelegateVotesChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BmErc1155DelegateVotesChanged represents a DelegateVotesChanged event raised by the BmErc1155 contract.
type BmErc1155DelegateVotesChanged struct {
	Delegate      common.Address
	PreviousVotes *big.Int
	NewVotes      *big.Int
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterDelegateVotesChanged is a free log retrieval operation binding the contract event 0xdec2bacdd2f05b59de34da9b523dff8be42e5e38e818c82fdb0bae774387a724.
//
// Solidity: event DelegateVotesChanged(address indexed delegate, uint256 previousVotes, uint256 newVotes)
func (_BmErc1155 *BmErc1155Filterer) FilterDelegateVotesChanged(opts *bind.FilterOpts, delegate []common.Address) (*BmErc1155DelegateVotesChangedIterator, error) {

	var delegateRule []interface{}
	for _, delegateItem := range delegate {
		delegateRule = append(delegateRule, delegateItem)
	}

	logs, sub, err := _BmErc1155.contract.FilterLogs(opts, "DelegateVotesChanged", delegateRule)
	if err != nil {
		return nil, err
	}
	return &BmErc1155DelegateVotesChangedIterator{contract: _BmErc1155.contract, event: "DelegateVotesChanged", logs: logs, sub: sub}, nil
}

// WatchDelegateVotesChanged is a free log subscription operation binding the contract event 0xdec2bacdd2f05b59de34da9b523dff8be42e5e38e818c82fdb0bae774387a724.
//
// Solidity: event DelegateVotesChanged(address indexed delegate, uint256 previousVotes, uint256 newVotes)
func (_BmErc1155 *BmErc1155Filterer) WatchDelegateVotesChanged(opts *bind.WatchOpts, sink chan<- *BmErc1155DelegateVotesChanged, delegate []common.Address) (event.Subscription, error) {

	var delegateRule []interface{}
	for _, delegateItem := range delegate {
		delegateRule = append(delegateRule, delegateItem)
	}

	logs, sub, err := _BmErc1155.contract.WatchLogs(opts, "DelegateVotesChanged", delegateRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BmErc1155DelegateVotesChanged)
				if err := _BmErc1155.contract.UnpackLog(event, "DelegateVotesChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseDelegateVotesChanged is a log parse operation binding the contract event 0xdec2bacdd2f05b59de34da9b523dff8be42e5e38e818c82fdb0bae774387a724.
//
// Solidity: event DelegateVotesChanged(address indexed delegate, uint256 previousVotes, uint256 newVotes)
func (_BmErc1155 *BmErc1155Filterer) ParseDelegateVotesChanged(log types.Log) (*BmErc1155DelegateVotesChanged, error) {
	event := new(BmErc1155DelegateVotesChanged)
	if err := _BmErc1155.contract.UnpackLog(event, "DelegateVotesChanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BmErc1155EIP712DomainChangedIterator is returned from FilterEIP712DomainChanged and is used to iterate over the raw logs and unpacked data for EIP712DomainChanged events raised by the BmErc1155 contract.
type BmErc1155EIP712DomainChangedIterator struct {
	Event *BmErc1155EIP712DomainChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BmErc1155EIP712DomainChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BmErc1155EIP712DomainChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BmErc1155EIP712DomainChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BmErc1155EIP712DomainChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BmErc1155EIP712DomainChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BmErc1155EIP712DomainChanged represents a EIP712DomainChanged event raised by the BmErc1155 contract.
type BmErc1155EIP712DomainChanged struct {
	Raw types.Log // Blockchain specific contextual infos
}

// FilterEIP712DomainChanged is a free log retrieval operation binding the contract event 0x0a6387c9ea3628b88a633bb4f3b151770f70085117a15f9bf3787cda53f13d31.
//
// Solidity: event EIP712DomainChanged()
func (_BmErc1155 *BmErc1155Filterer) FilterEIP712DomainChanged(opts *bind.FilterOpts) (*BmErc1155EIP712DomainChangedIterator, error) {

	logs, sub, err := _BmErc1155.contract.FilterLogs(opts, "EIP712DomainChanged")
	if err != nil {
		return nil, err
	}
	return &BmErc1155EIP712DomainChangedIterator{contract: _BmErc1155.contract, event: "EIP712DomainChanged", logs: logs, sub: sub}, nil
}

// WatchEIP712DomainChanged is a free log subscription operation binding the contract event 0x0a6387c9ea3628b88a633bb4f3b151770f70085117a15f9bf3787cda53f13d31.
//
// Solidity: event EIP712DomainChanged()
func (_BmErc1155 *BmErc1155Filterer) WatchEIP712DomainChanged(opts *bind.WatchOpts, sink chan<- *BmErc1155EIP712DomainChanged) (event.Subscription, error) {

	logs, sub, err := _BmErc1155.contract.WatchLogs(opts, "EIP712DomainChanged")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BmErc1155EIP712DomainChanged)
				if err := _BmErc1155.contract.UnpackLog(event, "EIP712DomainChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseEIP712DomainChanged is a log parse operation binding the contract event 0x0a6387c9ea3628b88a633bb4f3b151770f70085117a15f9bf3787cda53f13d31.
//
// Solidity: event EIP712DomainChanged()
func (_BmErc1155 *BmErc1155Filterer) ParseEIP712DomainChanged(log types.Log) (*BmErc1155EIP712DomainChanged, error) {
	event := new(BmErc1155EIP712DomainChanged)
	if err := _BmErc1155.contract.UnpackLog(event, "EIP712DomainChanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BmErc1155OwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the BmErc1155 contract.
type BmErc1155OwnershipTransferredIterator struct {
	Event *BmErc1155OwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BmErc1155OwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BmErc1155OwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BmErc1155OwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BmErc1155OwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BmErc1155OwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BmErc1155OwnershipTransferred represents a OwnershipTransferred event raised by the BmErc1155 contract.
type BmErc1155OwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_BmErc1155 *BmErc1155Filterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*BmErc1155OwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _BmErc1155.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &BmErc1155OwnershipTransferredIterator{contract: _BmErc1155.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_BmErc1155 *BmErc1155Filterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *BmErc1155OwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _BmErc1155.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BmErc1155OwnershipTransferred)
				if err := _BmErc1155.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_BmErc1155 *BmErc1155Filterer) ParseOwnershipTransferred(log types.Log) (*BmErc1155OwnershipTransferred, error) {
	event := new(BmErc1155OwnershipTransferred)
	if err := _BmErc1155.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BmErc1155TransferBatchIterator is returned from FilterTransferBatch and is used to iterate over the raw logs and unpacked data for TransferBatch events raised by the BmErc1155 contract.
type BmErc1155TransferBatchIterator struct {
	Event *BmErc1155TransferBatch // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BmErc1155TransferBatchIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BmErc1155TransferBatch)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BmErc1155TransferBatch)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BmErc1155TransferBatchIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BmErc1155TransferBatchIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BmErc1155TransferBatch represents a TransferBatch event raised by the BmErc1155 contract.
type BmErc1155TransferBatch struct {
	Operator common.Address
	From     common.Address
	To       common.Address
	Ids      []*big.Int
	Values   []*big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterTransferBatch is a free log retrieval operation binding the contract event 0x4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb.
//
// Solidity: event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values)
func (_BmErc1155 *BmErc1155Filterer) FilterTransferBatch(opts *bind.FilterOpts, operator []common.Address, from []common.Address, to []common.Address) (*BmErc1155TransferBatchIterator, error) {

	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _BmErc1155.contract.FilterLogs(opts, "TransferBatch", operatorRule, fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &BmErc1155TransferBatchIterator{contract: _BmErc1155.contract, event: "TransferBatch", logs: logs, sub: sub}, nil
}

// WatchTransferBatch is a free log subscription operation binding the contract event 0x4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb.
//
// Solidity: event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values)
func (_BmErc1155 *BmErc1155Filterer) WatchTransferBatch(opts *bind.WatchOpts, sink chan<- *BmErc1155TransferBatch, operator []common.Address, from []common.Address, to []common.Address) (event.Subscription, error) {

	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _BmErc1155.contract.WatchLogs(opts, "TransferBatch", operatorRule, fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BmErc1155TransferBatch)
				if err := _BmErc1155.contract.UnpackLog(event, "TransferBatch", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransferBatch is a log parse operation binding the contract event 0x4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb.
//
// Solidity: event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values)
func (_BmErc1155 *BmErc1155Filterer) ParseTransferBatch(log types.Log) (*BmErc1155TransferBatch, error) {
	event := new(BmErc1155TransferBatch)
	if err := _BmErc1155.contract.UnpackLog(event, "TransferBatch", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BmErc1155TransferSingleIterator is returned from FilterTransferSingle and is used to iterate over the raw logs and unpacked data for TransferSingle events raised by the BmErc1155 contract.
type BmErc1155TransferSingleIterator struct {
	Event *BmErc1155TransferSingle // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BmErc1155TransferSingleIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BmErc1155TransferSingle)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BmErc1155TransferSingle)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BmErc1155TransferSingleIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BmErc1155TransferSingleIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BmErc1155TransferSingle represents a TransferSingle event raised by the BmErc1155 contract.
type BmErc1155TransferSingle struct {
	Operator common.Address
	From     common.Address
	To       common.Address
	Id       *big.Int
	Value    *big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterTransferSingle is a free log retrieval operation binding the contract event 0xc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62.
//
// Solidity: event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value)
func (_BmErc1155 *BmErc1155Filterer) FilterTransferSingle(opts *bind.FilterOpts, operator []common.Address, from []common.Address, to []common.Address) (*BmErc1155TransferSingleIterator, error) {

	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _BmErc1155.contract.FilterLogs(opts, "TransferSingle", operatorRule, fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &BmErc1155TransferSingleIterator{contract: _BmErc1155.contract, event: "TransferSingle", logs: logs, sub: sub}, nil
}

// WatchTransferSingle is a free log subscription operation binding the contract event 0xc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62.
//
// Solidity: event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value)
func (_BmErc1155 *BmErc1155Filterer) WatchTransferSingle(opts *bind.WatchOpts, sink chan<- *BmErc1155TransferSingle, operator []common.Address, from []common.Address, to []common.Address) (event.Subscription, error) {

	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _BmErc1155.contract.WatchLogs(opts, "TransferSingle", operatorRule, fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BmErc1155TransferSingle)
				if err := _BmErc1155.contract.UnpackLog(event, "TransferSingle", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransferSingle is a log parse operation binding the contract event 0xc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62.
//
// Solidity: event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value)
func (_BmErc1155 *BmErc1155Filterer) ParseTransferSingle(log types.Log) (*BmErc1155TransferSingle, error) {
	event := new(BmErc1155TransferSingle)
	if err := _BmErc1155.contract.UnpackLog(event, "TransferSingle", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BmErc1155URIIterator is returned from FilterURI and is used to iterate over the raw logs and unpacked data for URI events raised by the BmErc1155 contract.
type BmErc1155URIIterator struct {
	Event *BmErc1155URI // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BmErc1155URIIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BmErc1155URI)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BmErc1155URI)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BmErc1155URIIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BmErc1155URIIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BmErc1155URI represents a URI event raised by the BmErc1155 contract.
type BmErc1155URI struct {
	Value string
	Id    *big.Int
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterURI is a free log retrieval operation binding the contract event 0x6bb7ff708619ba0610cba295a58592e0451dee2622938c8755667688daf3529b.
//
// Solidity: event URI(string value, uint256 indexed id)
func (_BmErc1155 *BmErc1155Filterer) FilterURI(opts *bind.FilterOpts, id []*big.Int) (*BmErc1155URIIterator, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}

	logs, sub, err := _BmErc1155.contract.FilterLogs(opts, "URI", idRule)
	if err != nil {
		return nil, err
	}
	return &BmErc1155URIIterator{contract: _BmErc1155.contract, event: "URI", logs: logs, sub: sub}, nil
}

// WatchURI is a free log subscription operation binding the contract event 0x6bb7ff708619ba0610cba295a58592e0451dee2622938c8755667688daf3529b.
//
// Solidity: event URI(string value, uint256 indexed id)
func (_BmErc1155 *BmErc1155Filterer) WatchURI(opts *bind.WatchOpts, sink chan<- *BmErc1155URI, id []*big.Int) (event.Subscription, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}

	logs, sub, err := _BmErc1155.contract.WatchLogs(opts, "URI", idRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BmErc1155URI)
				if err := _BmErc1155.contract.UnpackLog(event, "URI", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseURI is a log parse operation binding the contract event 0x6bb7ff708619ba0610cba295a58592e0451dee2622938c8755667688daf3529b.
//
// Solidity: event URI(string value, uint256 indexed id)
func (_BmErc1155 *BmErc1155Filterer) ParseURI(log types.Log) (*BmErc1155URI, error) {
	event := new(BmErc1155URI)
	if err := _BmErc1155.contract.UnpackLog(event, "URI", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
